<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nikhil Gupta]]></title>
  <link href="http://nikhgupta.com/atom.xml" rel="self"/>
  <link href="http://nikhgupta.com/"/>
  <updated>2013-10-22T12:28:52+05:30</updated>
  <id>http://nikhgupta.com/</id>
  <author>
    <name><![CDATA[Nikhil Gupta]]></name>
    <email><![CDATA[me@nikhgupta.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Back with a Bang!]]></title>
    <link href="http://nikhgupta.com/blog/2013/10/22/back-with-a-bang/"/>
    <updated>2013-10-22T06:21:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2013/10/22/back-with-a-bang</id>
    <content type="html"><![CDATA[<p>Oh, yes! I am, definitely, back &ndash; with a bang! Before, an interpretion is made
on the word, you ought to know about <code>!#</code>: <a href="http://en.wikipedia.org/wiki/Shebang_(Unix">Shebang</a>.</p>

<p>First, let me talk about <strong>Writing</strong> &ndash; a habit that I have cultivated over time,
and a strong case can be made for the fact that it is one of the rarest
recreational stuff that I do and preach to my friends. It can be really helpful,
and at the same time, can take you to an n-dimensional hyperspace, where you can
imagine nearly anything you want to believe or create. Not only that, for me,
writing is a process to jot down those pesky little thoughts (hundreds of them)
that roam inside my mind like ants near a sugar cube. I, usually, keep
a personal diary where I am able to write these things down, but then, I am
craving for some social interaction (online, to be precise) and maintaining
a steady blog can really help with that.</p>

<!-- more -->


<p>Anyways, I write here. And, I write rarely as per the reasons stated above. But,
I am thinking to make a switch &ndash; give it a try. I won&rsquo;t be writing anything
personal, but atleast, I will be trying to make a steady attempt at posting once
per day &ndash; on coding, particularly.</p>

<p>Coming back to the <em>bang</em>, anyone who knows will agree that I live in code.
<strong>Shebang</strong> is probably the first thing that crosses my mind when I wake up, and
definitely, the last when I sleep. But, these days, I am leaning towarding
combining the two. That can either be done via <a href="http://en.wikipedia.org/wiki/Literate_programming">Literate Programming</a>
(when coding), or otherwise, writing about code (when writing).</p>

<p>In order to accomplish the above goals, I have setup a new blog at the current
address &ndash; with only a few posts from the past. I am using <a href="http://octopress.org">Octopress</a>,
and yes, I chose it over <a href="http://wordpress.org">WordPress</a>, again.</p>

<p>Reasons for switching are really simple:</p>

<ul>
<li>Comfort of using <a href="http://www.vim.org">Vim</a> or
<a href="http://www.gnu.org/software/emacs/">Emacs</a> to write my posts. In particular,
<a href="http://orgmode.org">Emacs&#8217; Org mode</a> is a godsend for writing your thoughts.
I have been using it since last 2 months or so, and I am pretty confident with
it, now.</li>
<li>Posts are versioned and securely stored inside a Github repository.</li>
<li>Site is served via Github pages, which in turn means, safer hosting. I am
always experimenting with my hosting server, and often time, I am able to blow
it up. Hosting my site on Github ensures that it is free from such
manipulations and always served nicely.</li>
<li>It, just, feels more appropriate. :)</li>
</ul>


<p>So, I used the <a href="https://github.com/shashankmehta/greyshade">GreyShade</a> theme
from <a href="http://shashankmehta.in">Shashank Mehta</a>, a fellow IIT guy (yeah, I have
served my time at IIT Delhi, too :P) and, gave it a simple spin to roll out with
the current version. I must say, he has done a really good work with the
Octopress theme and definitely, deserves a kudos!</p>

<p>Now, the site is all up and running and I, quickly, want to jot down a few tasks
that I am committed for this month:</p>

<ul>
<li>Improve upon the current website design.</li>
<li>Write a post daily on the current website, preferably, about coding in ruby.</li>
<li>Setup org mode in Emacs, so that I can write my blog posts using it.</li>
<li>Create a few basic public APIs:

<ul>
<li>an API that lists words matching a given pattern.</li>
<li>a WhoIs API that also, lists available domains matching a given pattern.</li>
</ul>
</li>
<li>Create a few basic applications using RoR:

<ul>
<li>a domain searching application, somewhat like <a href="http://domai.nr">domai.nr</a></li>
<li>an application that makes it easy to run scripts on servers (have detailed
specifications listed in a separate personal diary)</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meet the Amazing Hubot]]></title>
    <link href="http://nikhgupta.com/blog/2013/04/01/meet-the-amazing-hubot/"/>
    <updated>2013-04-01T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2013/04/01/meet-the-amazing-hubot</id>
    <content type="html"><![CDATA[<p>Recently, I came across <a href="http://hubot.github.com">Hubot</a> &ndash; the amazing bot
from <a href="http://github.com">Github</a>, which lets me do nearly anything while
talking to it. Some of the examples being querying my site for availability,
tracking down how many visitors I had in last 24 hours, updating my twitter
status, grabbing tasks from my basecamp projects, and so on.</p>

<p>Currently, I am using Hubot on <a href="http://hipchat.com">HipChat</a> and GTalk, but as
my team frequently uses Skype, I will be enabling a Skype adapter for it,
pretty soon (the Skype adapter, in particular, can not be installed on
<a href="http://heroku.com">Heroku</a>). The Hubot instance runs as <em>Edwin Jarvis</em>, as
I always wanted to have something close to the esteemed J.A.R.V.I.S. from the
movie Iron-Man.</p>

<!-- more -->


<h1>Installing Hubot</h1>

<p>Here is a brief overview for anyone wanting to get started with Hubot:</p>

<ul>
<li>Install <a href="http://nodejs.org">Node.js</a></li>
<li>Clone the hubot repository from github, locally:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone http://github.com/github/hubot jarvis
</span><span class='line'><span class="nb">cd </span>jarvis
</span><span class='line'>npm install
</span><span class='line'>bin/hubot
</span></code></pre></td></tr></table></div></figure>


<p>This should start the Hubot in your Shell. If, instead, this gives an error
saying <code>redis</code> was not found or something similar, make sure to remove
<code>redis-brain.coffee</code> from <code>hubot-scripts.json</code> file, and try running again!</p>

<h1>Using Multiple Adapters</h1>

<p>Ok, so running Hubot locally is good &ndash; we can see what it does, we can test
out our code/scripts, etc., but the real power of hubot lies in running it
over a chat server, so that it acts like ChatOps &ndash; you can virtually do
anything online by simply talking to the Hubot (think: deploying your code).</p>

<p>Since, <a href="http://hipchat.com">Hipchat</a> now provides a free plan for upto
5 users, it stands ideally as a Chat server for our needs (we are a small
team). Additionally, GTalk serves as a quick access to our bot, since it is
always open via either the GMail browser tab, or via some chat client.
However, there is a sligh problem. Hubot doesn&rsquo;t currently support multiple
adapters, i.e. we can&rsquo;t tell hubot to run on both Hipchat and Gtalk,
simultaneously, while using the same source code. But, why use the same
source? Why not make another hubot to run on GTalk? Well, I use a lot of
scripts &ndash; some are custom &ndash; and it is a pain to update two sources to make the
two hubots use the same set of scripts. Therefore, I implemented the following
procedure to let the two hubots use the same source:</p>

<ul>
<li>First, create new dedicated accounts for our hubot on both Hipchat and
Gtalk.</li>
<li>Add <code>hubot-hipchat</code> and <code>hubot-gtalk</code> as dependencies in <code>package.json</code>.
It should look like:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;dependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;hubot-hipchat&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;= 2.4.5&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;hubot-gtalk&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;= 0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Edit <code>Procfile</code> so that it uses adapter name and user from the environment
variables that we will create for the heroku instance of each bot:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>web: bin/hubot -a <span class="nv">$HUBOT_ADAPTER_NAME</span> -n <span class="nv">$HUBOT_ADAPTER_USER</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a git repository for our bot, so that we can track our bot&rsquo;s code:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -am <span class="s2">&quot;Initial Commit&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Download and install <a href="http://toolbelt.heroku.com">Heroku Toolbelt</a>, since
we will be deploying our bots to Heroku.</p></li>
<li><p>Let us, first deploy our bot on GTalk, since it is a bit easy. Start by
creating a Heroku application for our GTalk bot:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku create
</span><span class='line'>heroku rename <span class="s1">&#39;some-random-name-for-our-gtalk-bot&#39;</span>
</span><span class='line'>git remote rename heroku gtalk
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>We will be using <code>redis</code> as our bot&rsquo;s brain. So, install <code>redis</code> on our
heroku instance (which is free, by the way):</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku addons:add redistogo:nano
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Push the bot to heroku:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push gtalk master
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set our environment variables for the GTalk bot:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku config:add <span class="se">\</span>
</span><span class='line'>  <span class="nv">HUBOT_ADAPTER_NAME</span><span class="o">=</span><span class="s2">&quot;gtalk&quot;</span> <span class="se">\</span>
</span><span class='line'>  <span class="nv">HUBOT_ADAPTER_USER</span><span class="o">=</span><span class="s2">&quot;&lt;bot name&gt;&quot;</span> <span class="se">\</span>
</span><span class='line'>  <span class="nv">HUBOT_GTALK_USERNAME</span><span class="o">=</span><span class="s2">&quot;&lt;bot gmail complete address&gt;&quot;</span> <span class="se">\</span>
</span><span class='line'>  <span class="nv">HUBOT_GTALK_PASSWORD</span><span class="o">=</span><span class="s2">&quot;&lt;bot gmail password&gt;&quot;</span> <span class="se">\</span>
</span><span class='line'>  <span class="nv">HUBOT_GTALK_WHITELIST_DOMAINS</span><span class="o">=</span><span class="s2">&quot;&lt;your company domain name&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Run our heroku process:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku ps:scale <span class="nv">web</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Your Gtalk bot is now live.</p></li>
<li><p>Let us, now, run this on HipChat. Start again, by creating a Heroku
application for our Hipchat bot:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku create
</span><span class='line'>heroku rename <span class="s1">&#39;some-random-name-for-our-hipchat-bot&#39;</span>
</span><span class='line'>git remote rename heroku hipchat
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install <code>redis</code>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku addons:add redistogo:nano
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Push the bot to heroku:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push hipchat master
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Set our environment variables for the HipChat bot. Settings marked with
<code>@@</code> can be obtained by visiting your bot&rsquo;s <a href="https://www.hipchat.com/account/xmpp">XMPP/Jabber account
settings</a>, after logging in HipChat
with your bot&rsquo;s account:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku config:add --app<span class="o">=</span><span class="s2">&quot;&lt;name-for-our-hipchat-bot&gt;&quot;</span> <span class="se">\</span>
</span><span class='line'>  <span class="nv">HUBOT_ADAPTER_NAME</span><span class="o">=</span><span class="s2">&quot;hipchat&quot;</span> <span class="se">\</span>
</span><span class='line'>  <span class="nv">HUBOT_ADAPTER_USER</span><span class="o">=</span><span class="s2">&quot;&lt;@@room name&gt;&quot;</span> <span class="se">\</span>
</span><span class='line'>  <span class="nv">HEROKU_URL</span><span class="o">=</span><span class="s2">&quot;http://&lt;name-for-our-hipchat-bot&gt;.herokuapp.com&quot;</span> <span class="se">\</span>
</span><span class='line'>  <span class="nv">HUBOT_HIPCHAT_JID</span><span class="o">=</span><span class="s2">&quot;&lt;@@username&gt;@chat.hipchat.com&quot;</span> <span class="se">\</span>
</span><span class='line'>  <span class="nv">HUBOT_HIPCHAT_PASSWORD</span><span class="o">=</span><span class="s2">&quot;&lt;hipchat.com password for your bot&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Run our heroku process:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku ps:scale <span class="nv">web</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Your HipChat bot should now be live. Try logging in as a normal hipchat
user, and talking to the bot (hint: <code>@jarvis help</code>, where my bot&rsquo;s mention
name was <code>@jarvis</code>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim as PHP IDE: Ctags, and Code Browsing]]></title>
    <link href="http://nikhgupta.com/blog/2012/04/01/using-vim-php-ide-exuberant-ctags-code-browsing/"/>
    <updated>2012-04-01T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2012/04/01/using-vim-php-ide-exuberant-ctags-code-browsing</id>
    <content type="html"><![CDATA[<p>So, past few weeks, I have been really fascinated with the all powerful Vim.
And, I often wonder why: I took so much time switching to it? Probably, the
steep learning curve! It has to be.</p>

<p>Anyways, so I have really really progressed with Vim this time, as compared to
my earlier trials. I am quite efficient with Vim now &ndash; even writing this blog
post on it. I know how to move quickly, make efficient uses of search and
replace, using Vim scripts etc. I have really really found plugins like
Gundo, Fugitive, Tagbar, Syntastic, Snipmate, NerdTree, and Powerline to be
useful and not to mention plugins like Vim-Rails which make my day-to-day
tasks easier with a particular language. Oh, and did I mention the incredible
<code>!</code> and <code>@</code> operators? They just rock!</p>

<p>But, well. This post is about using Ctags with Vim to make Vim feel more like
an IDE and readily use Source Code Browsing within frameworks, large code
projects, etc. Here, in this post, I have specified my configuration/process
for using Ctags with MacVim for a CakePHP based project.</p>

<!-- more -->


<h3>The Process</h3>

<p>Well, I would try to create my Ctags on the fly, using Git hooks. This lets me
simply checkout, merge or commit to a branch and my tags would be generated
for the code in question. Moreover, these Ctags generated files are stored
inside <code>.git</code> directory, which keeps our repositories clean (no need to add
a file to <code>.gitignore</code>). Also, I would prefer a centralized place where I can
manage any script I use to create these Ctags, and hence, if after about an
year I think I need a change in the way script is working, or if say I want to
add support for or remove support for a language, I should be able to do it
from a single place and affect all my git repositories using these Ctags
hooks.</p>

<p>For this to work, i.e. for Vim to pick up our Ctags (that will be created in
<code>.git/tags</code> file) we need to have <code>Fugitive</code> installed (which I will really
really recommend anyways). This will make Vim look for Ctags in a <code>.git/tags</code>
and <code>.git/&lt;lang&gt;.tags</code> file in our repository, irrespective of the current
working directory.</p>

<p>Let   s set up a default set of hooks that Git will use as a template when
creating or cloning a repository (requires Git 1.7.1 or newer):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global init.templatedir <span class="s1">&#39;~/.git_template&#39;</span>
</span><span class='line'>mkdir -p ~/.git_template/hooks
</span></code></pre></td></tr></table></div></figure>


<p>I, usually, put all my Git related stuff in <code>~/Code/__dotfiles/git/</code> and
hence, the above template directory lands up as
<code>~/Code/__dotfiles/git/template/</code> with all the hooks, in my
<a href="http://github.com/nikhgupta/dotfiles">.dotfiles</a> repository.</p>

<p>Now onto the first hook, which isn&rsquo;t actually a hook at all, but rather
a script the other hooks will call. Place in <code>~/.git_template/hooks/ctags</code> and
mark as executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>rm -f .git/tags ctags --tag-relative -Rf.git/tags <span class="se">\</span>
</span><span class='line'>  --exclude<span class="o">=</span>.git --languages<span class="o">=</span>-javascript,sql
</span></code></pre></td></tr></table></div></figure>


<p>Although, make sure that the <code>ctags</code> version is the GNU one, and the above
script runs without showing any errors. If installing via <code>Homebrew</code> make sure
that the <code>which ctags</code> command shows the correct <code>ctags</code> executable path.</p>

<p>Making this a separate script makes it easy to invoke <code>.git/hooks/ctags</code> for
a one-off re-index (or <code>git config --global alias.ctags '!.git/hooks/ctags'</code>,
then <code>git ctags</code>), as well as easy to edit for that special case repository
that needs a different set of options to ctags. For example, I might want to
re-enable indexing for JavaScript or SQL files, which I&rsquo;ve disabled here
because I&rsquo;ve found both to be of limited value and noisy in the warning
department.  And, in these edge cases, all I need is to modify the
corresponding <code>.git/hooks/ctags</code> script in that git repository. Neat and
clean.</p>

<p>We still need to create the actual hooks that the Git will copy to all
repositories that are (re)initialized using the <code>git init</code> command.  All the
files in the <code>~/.git_template/hooks</code> folder needs to be marked as executables.
You should use the following content for: <code>post-commit</code>, <code>post-merge</code>, and
<code>post-checkout</code> hooks (which simply calls the <code>ctags</code> hook, we create above):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>.git/hooks/ctags &gt;/dev/null 2&gt;&amp;1 &amp;
</span></code></pre></td></tr></table></div></figure>


<p>Additionally, if you feel tags should also be generated on using <code>git rebase</code>,
add the following code to <code>post-rewrite</code> hook:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$1&quot;</span> in
</span><span class='line'>  rebase<span class="o">)</span> <span class="nb">exec</span> .git/hooks/post-merge ;;
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once, the above is done, all we need to do is to issue a <code>git init</code> command to
create Ctags for an already existing repository. All new git repositories will
automatically include these hooks and hence, will create the Ctags file on the
fly. Pure Automation. ;)</p>

<h3>Global Projects</h3>

<p>There are some projects that I always want available for source code browsing
like the Rails source code itself. For such projects, I would generally run
a one-off shell script that does this work for me, and store the generated
tags file in a directory such as <code>~/.tags/</code> with a suitable name. O&#8217;course it
does not make sense to version this directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">RubyVersion</span><span class="o">=</span><span class="s2">&quot;1.9.3-p194&quot;</span>
</span><span class='line'><span class="nv">LaravelPath</span><span class="o">=</span><span class="s2">&quot;${HOME}/Code/projects/lab/laravel&quot;</span>
</span><span class='line'>
</span><span class='line'>mkdir -p <span class="s2">&quot;${HOME}/.ctags&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># RVM: Ruby version 1.9.3-p194</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;${RubyVersion}&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>mkdir -p <span class="s2">&quot;${HOME}/.ctags/ruby/${RubyVersion}&quot;</span>
</span><span class='line'>  <span class="nv">TAG_FILE</span><span class="o">=</span><span class="s2">&quot;${HOME}/.ctags/ruby/${RubyVersion}/tags&quot;</span>
</span><span class='line'>  rm -f <span class="s2">&quot;${TAG_FILE}&quot;</span>
</span><span class='line'>  <span class="k">for </span>rubydir in <span class="sb">`</span>find <span class="s2">&quot;${HOME}/.rvm/gems&quot;</span> -type d -depth 1 -iname <span class="s2">&quot;*${RubyVersion}*&quot;</span><span class="sb">`</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    if</span> <span class="o">[</span> -d <span class="s2">&quot;${rubydir}/gems&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;Looking inside: ${rubydir}/gems&quot;</span>
</span><span class='line'>      ctags --recurse --tag-relative <span class="se">\</span>
</span><span class='line'>        --languages<span class="o">=</span>-javascript,sql <span class="se">\</span>
</span><span class='line'>        --exclude<span class="o">=</span>.git <span class="se">\</span>
</span><span class='line'>        --sort<span class="o">=</span>yes --append <span class="se">\</span>
</span><span class='line'>        -f <span class="s2">&quot;${TAG_FILE}&quot;</span> <span class="se">\</span>
</span><span class='line'>        <span class="nv">$rubydir</span>/gems/*
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">  done</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span>
</span><span class='line'><span class="nb">  echo</span> <span class="s2">&quot;------ generated ctags for: ${RubyVersion} ------&quot;</span>
</span><span class='line'>  cat <span class="s2">&quot;${TAG_FILE}&quot;</span> | wc
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;---------------------------------------------&quot;</span>
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Laravel</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;${LaravelPath}&quot;</span> -a -d <span class="s2">&quot;${LaravelPath}&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>mkdir -p <span class="s2">&quot;${HOME}/.ctags/php/laravel&quot;</span>
</span><span class='line'>  <span class="nv">TAG_FILE</span><span class="o">=</span><span class="s2">&quot;${HOME}/.ctags/php/laravel/tags&quot;</span>
</span><span class='line'>  rm -f <span class="s2">&quot;${TAG_FILE}&quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Looking inside: ${LaravelPath}&quot;</span>
</span><span class='line'>  ctags --recurse --tag-relative <span class="se">\</span>
</span><span class='line'>    --languages<span class="o">=</span>-javascript,sql <span class="se">\</span>
</span><span class='line'>    --exclude<span class="o">=</span>.git <span class="se">\</span>
</span><span class='line'>    --sort<span class="o">=</span>yes --append <span class="se">\</span>
</span><span class='line'>    --PHP-kinds<span class="o">=</span>+cf <span class="se">\</span>
</span><span class='line'>    --regex-PHP<span class="o">=</span><span class="s1">&#39;/abstract class ([^ ]*)/\1/c/&#39;</span> <span class="se">\</span>
</span><span class='line'>    --regex-PHP<span class="o">=</span><span class="s1">&#39;/interface ([^ ]*)/\1/c/&#39;</span> <span class="se">\</span>
</span><span class='line'>    --regex-PHP<span class="o">=</span><span class="s1">&#39;/(public |static |abstract |protected |private )+function ([^ (]*)/\2/f/&#39;</span> <span class="se">\</span>
</span><span class='line'>    -f <span class="s2">&quot;${TAG_FILE}&quot;</span> <span class="se">\</span>
</span><span class='line'>    <span class="nv">$LaravelPath</span>
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="nb">  echo</span> <span class="s2">&quot;-------- generated ctags for: Laravel -------&quot;</span>
</span><span class='line'>  cat <span class="s2">&quot;${TAG_FILE}&quot;</span> | wc
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;---------------------------------------------&quot;</span>
</span><span class='line'>  <span class="nb">echo</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, I set the following inside my <code>~/.vimrc</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="k">tags</span><span class="p">=</span>.<span class="sr">/tags;/</span>
</span><span class='line'>augroup TagFileType
</span><span class='line'>  autocmd<span class="p">!</span>
</span><span class='line'>  autocmd <span class="nb">FileType</span> * <span class="k">setl</span> <span class="k">tags</span><span class="p">&lt;</span>
</span><span class='line'>  autocmd <span class="nb">FileType</span> * exe <span class="s1">&#39;setl tags+=~/.ctags/&#39;</span> . &amp;<span class="k">filetype</span> . <span class="s1">&#39;/*/tags&#39;</span>
</span><span class='line'>augroup END
</span></code></pre></td></tr></table></div></figure>


<p>This basically tells vim to only load ctags for the current filetype, i.e. for
a <code>ruby</code> buffer, vim will load all ctags files inside <code>~/.ctags/ruby</code>
directory, and no ctags file inside <code>~/.ctags/php</code></p>

<h3>Epilogue</h3>

<p>(Now, that I have completed writing the post and I read it again, it seems
that this post feels like a rewrite <a href="http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html">a post by tPope</a>. Well,
I was originally thinking of a different way to create these Ctags, but as
I went deeper and deeper, I realized that what
<a href="https://github.com/tpope">tPope</a> describes is so natural and easy, that
I have to ditch whatever it is &ndash; what I was doing now. And, do not forget,
I am less than a month old with Vim and I am talking Ctags with Vim.  I am
allowed to reherse my steps :P )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: Gundo and Tabular plugins]]></title>
    <link href="http://nikhgupta.com/blog/2012/03/28/vim-awesomeness-gundo-and-tabular-plugins/"/>
    <updated>2012-03-28T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2012/03/28/vim-awesomeness-gundo-and-tabular-plugins</id>
    <content type="html"><![CDATA[<p>Recently, I switched to MacVim in order to give VIM another shot. Since, then,
Vim has kept on amazing me with its feature set.</p>

<p>Learning from Vimcasts.org, I get to know the Gundo and Tabular plugins. This
post is a short excerpt of what they do and how they help me in my day to day
editing.</p>

<!-- more -->


<h3>Gundo</h3>

<p>Traditional editors have a concept of undo-redo which is fairly simple &ndash; you
can do something &ndash; undo it and redo it, i.e. you can traverse on path <code>ABEFG</code></p>

<p>VIM allows me to traverse the changes in a chronological manner, as well. That
is to say, I can even go to edits not in the same timeline, i.e. I am able to
traverse <code>ABCDEFG</code> as they happened.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>      / `---------- C ---- D
</span><span class='line'>A--- B -- |
</span><span class='line'>      \,----------------------- E ----- F ------- G
</span></code></pre></td></tr></table></div></figure>


<p>We can use the <code>:earlier Nm</code> command to go back a few minutes (and even
seconds, hours, days). We can use <code>:GundoToggle</code> to view a quick Ascii tree of
our changes and compare the two edits in the vim timeline for undos</p>

<h3>Tabular</h3>

<p>I can simply align my code using <code>:Tabularize /{pattern}</code>. For example, to
align assignments I can use something like <code>:Tab /=</code> and, if I prefer to keep
the spaces attached to the code on the left, I can use something like <code>:Tab
/=\zs</code> The effects will be as below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># no tabularize</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">1322</span>
</span><span class='line'><span class="n">abc</span> <span class="o">=</span> <span class="mi">1323</span>
</span><span class='line'><span class="n">abcde</span> <span class="o">=</span> <span class="mi">1324</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># :Tab /=</span>
</span><span class='line'><span class="n">a</span>     <span class="o">=</span> <span class="mi">1322</span>
</span><span class='line'><span class="n">abc</span>   <span class="o">=</span> <span class="mi">1323</span>
</span><span class='line'><span class="n">abcde</span> <span class="o">=</span> <span class="mi">1324</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># :Tab /=\zs</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span>     <span class="mi">1322</span>
</span><span class='line'><span class="n">abc</span> <span class="o">=</span>   <span class="mi">1323</span>
</span><span class='line'><span class="n">abcde</span> <span class="o">=</span> <span class="mi">1324</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5minutes.to Beta Video]]></title>
    <link href="http://nikhgupta.com/blog/2012/03/28/5minutes-to-beta-video/"/>
    <updated>2012-03-28T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2012/03/28/5minutes-to-beta-video</id>
    <content type="html"><![CDATA[<p>Recently, I have been involved with the <a href="http://5minutes.to/">5minutes.to</a>
application. This application helps you get up and ready with your next website
in 5 minutes or less including email addresses, templates and what not.</p>

<p>In this post, I have posted an introductory video we made for
<a href="http://beta.5minutes.to/">5minutes.to</a>, and by all means we love it :)</p>

<!-- more -->




<p><iframe
src="http://player.vimeo.com/video/39292344?title=0&amp;byline=0&amp;portrait=0"
frameborder="0" width="100%" height="500px"></iframe></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrapping my Rails application]]></title>
    <link href="http://nikhgupta.com/blog/2012/03/20/bootstrapping-my-rails-application/"/>
    <updated>2012-03-20T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2012/03/20/bootstrapping-my-rails-application</id>
    <content type="html"><![CDATA[<p>This post details my starting steps with a new <a href="http://rubyonrails.org">Rails</a>
project, and is only kept here to remind me of various tasks that I,
generally, like to do at this time. Many of these steps might be redundant or
even, obsolete by the time you lay yours eyes on this post :)</p>

<!-- more -->


<h5>Install Rails</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails new my_app -T -d mysql -j jquery
</span></code></pre></td></tr></table></div></figure>


<h5>Initialize a git repository</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>my_app
</span><span class='line'>git flow init -d <span class="c"># initialize git work-flow</span>
</span><span class='line'>git add .
</span><span class='line'>git commit -am <span class="s2">&quot;Installed Rails&quot;</span>
</span><span class='line'>git flow feature start prepare_base
</span></code></pre></td></tr></table></div></figure>


<h5>Create a RVM configuration file</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm use 1.9.3@rails --rvmrc
</span></code></pre></td></tr></table></div></figure>


<h5>Add some starting gems to Gemfile</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;haml&#39;</span>
</span><span class='line'><span class="c1"># gem &#39;kaminari&#39;</span>
</span><span class='line'><span class="c1"># gem &#39;devise&#39;</span>
</span><span class='line'><span class="c1"># gem &#39;capistrano&#39;</span>
</span><span class='line'><span class="c1"># gem &#39;unicorn&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;turn&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;haml-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara-webkit&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-cucumber&#39;</span>
</span><span class='line'>  <span class="c1"># gem &#39;guard-unicorn&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;ruby_gntp&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;minitest&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;launchy&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Run Bundle Install</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<h5>Add database settings in config/database.yml</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake db:create:all
</span></code></pre></td></tr></table></div></figure>


<h5>Change Home Page</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate controller home index
</span><span class='line'>rm -rf public/index.html
</span><span class='line'>find . -type f -iname <span class="s2">&quot;*.erb&quot;</span> -delete <span class="c"># remove all erb files since we are using haml</span>
</span><span class='line'><span class="c"># add &#39;root :to =&gt; &quot;Home#index&quot;&#39; in config/routes.rb</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Lets, make some generations, huh.</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate rspec:install
</span><span class='line'>rails generate cucumber:install --capybara
</span><span class='line'>guard init rspec <span class="o">&amp;&amp;</span> guard init cucumber
</span></code></pre></td></tr></table></div></figure>


<h5>Make some changes to the <code>features/support/env.rb</code> file:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;cucumber/rails&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/rails&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/cucumber&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/session&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;factory_girl/step_definitions&quot;</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_selector</span>  <span class="o">=</span> <span class="ss">:css</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:webkit</span>
</span><span class='line'><span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">allow_rescue</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:transaction</span>
</span><span class='line'><span class="ss">Cucumber</span><span class="p">:</span><span class="ss">:Rails</span><span class="o">::</span><span class="no">Database</span><span class="o">.</span><span class="n">javascript_strategy</span> <span class="o">=</span> <span class="ss">:truncation</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Lets, add some Cucumber Tests (<code>features/test.feature</code> file):</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Feature</span><span class="p">:</span> <span class="no">Testing</span> <span class="no">Configuration</span>
</span><span class='line'>  <span class="no">In</span> <span class="n">order</span> <span class="n">to</span> <span class="n">have</span> <span class="n">a</span> <span class="n">base</span> <span class="k">for</span> <span class="n">my</span> <span class="kp">new</span> <span class="n">application</span>
</span><span class='line'>  <span class="no">As</span> <span class="n">a</span> <span class="n">developer</span>
</span><span class='line'>  <span class="n">I</span> <span class="n">want</span> <span class="n">to</span> <span class="nb">test</span> <span class="n">the</span> <span class="n">configuration</span> <span class="n">settings</span> <span class="k">for</span> <span class="n">this</span> <span class="n">application</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Test</span> <span class="no">Home</span> <span class="no">Page</span>
</span><span class='line'>    <span class="no">Given</span> <span class="n">I</span> <span class="n">am</span> <span class="n">on</span> <span class="n">the</span> <span class="n">home</span> <span class="n">page</span>
</span><span class='line'>    <span class="no">Then</span>  <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="s2">&quot;Home#index&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>And, the corresponding steps in <code>features/step_definitions/test_steps.rb</code> file:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^I am on the home page$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^I should see &quot;([^&quot;]*)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">text</span><span class="o">|</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span> <span class="n">text</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Open a iTerm2 tab each for the following processes:</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># default tab</span>
</span><span class='line'>guard
</span><span class='line'>tail -fn0 log/test.log
</span><span class='line'>rails console
</span><span class='line'>tail -fn0 log/development.log
</span><span class='line'>rails server
</span></code></pre></td></tr></table></div></figure>


<h5>Merge our feature into development</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git commit -am <span class="s2">&quot;finished with preparing base&quot;</span>
</span><span class='line'>git flow feature finish prepare_base
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Ruby and Rails..]]></title>
    <link href="http://nikhgupta.com/blog/2012/03/19/thoughts-getting-started-with-ruby-rails/"/>
    <updated>2012-03-19T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2012/03/19/thoughts-getting-started-with-ruby-rails</id>
    <content type="html"><![CDATA[<p>Okay, so past an year I have been trying to switch into RubyOnRails for
various reasons &ndash; and yes, they are numerous. I wanted to work less with the
<em>how-tos</em> and instead, wanna work more with <em>what-i-want-next</em> when I develop
applications for myself. I wanted to make use of those gorgeous little gems
that will fit in so nicely with my Ruby code &ndash; I wanted to develop business
logic instead of behavior (think devise, paperclip, clearance, and so on) and
then, I, also, wanted to make use of some of the awesome assistants the rail
community has for their everyday tasks (think capistrano, cucumber, and so
on).</p>

<!-- more -->


<p>Now, I do understand that the language (or I should say Syntax) is easy to
learn and gorgeously, so.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1"># Think PHP:</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$my_variable</span><span class="p">))</span> <span class="nx">do_this</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># v/s Ruby:</span>
</span><span class='line'><span class="n">do_this</span> <span class="k">if</span> <span class="n">my_variable</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, then again, learning RubyOnRails has been a tough job. Primarily, due to
the steep learning curve on <em>how-to-get-started-with-ruby-on-rails</em> frontier.</p>

<p>Fortunately, for me, I have been a <code>shell</code> guy &ndash; I, absolutely, adore shell
and rely on it for much of the repetitive tasks, everyday &ndash; kinda to the
extent that, iTerm.app is the most frequently used application on my Mac, just
like every other developer, who understands the sheer power shell puts in our
hand ;) (Not to mention, <code>git</code> is involved in almost all my projects)</p>

<p>So, I went on and installed RVM and loaded it with Rubies and Gems and what
not, and I have been using this setup from quite a long time &ndash; just not enough
to actually start building some awesome application.</p>

<p>This was partly due to the fact that, whenever I needed to make some
application for a client, I would go in and start building it with CakePHP
rather. Probably, the simple reason being I wanted to get on with creating the
application, instead of learning a framework which will create the
application, afterwards. I did not <em>really</em> wanted to invest the time into
RubyOnRails.</p>

<p>But, alas! we are humans &ndash; and, that makes us unsatisfied with whatever little
satisfaction, we might have, by chance. And, I wanted to dwell inside
RubyOnRails world, yet, again. But, this time, I really wanted to go all out
and give it a good fight and either win or lose, but have an outcome at once.</p>

<p>I know, most of us would never go in the step-by-step-of-learnings-steps and
jump to things we don&rsquo;t quite understand &ndash; which is nice, but may often, force
you to give up on things &ndash; which is what used to happen with me. So, this
time, I decided to go slow &ndash; learnings things one step at a time &ndash; and follow
screencasts and tutorials, with all my heart.</p>

<p>Oh, and did I tell you? It was just not enough! I wanted to know if I can use
Vim to be more productive? And, hence I got myself a shiny new MacVim.app to
learn along with (and, I must say its been around 3 weeks and I am more than
happy with what I can do with Vim).</p>

<p>Well, coming back to RubyOnRails, I started with the famous <code>_why</code> tutorial at:
tryruby.org and man! that definitely, did help me a lot (as an example,
earlier I was never aware why some methods had an exclamation in ruby at the
end). So, the first step would be to <em>really</em> know things work in Ruby. And,
TryRuby.org helps with that when you are starting out in Ruby.</p>

<p>Next, I started watching a few screencasts on getting started with RubyOnRails
(note that, I wanted to learn things from the basic &ndash; just so that, I am sure
I have my basics all covered up &ndash; also, note that I have already gone through:
<a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book">Michael Hartl&rsquo;s awesome RubyOnRails
book</a>), and
finally, I was really inspired by <a href="http://net.tutsplus.com/tutorials/ruby/the-intro-to-rails-screencast-i-wish-i-had/">this particular
tutorial</a>
which really explained things a lot, and not to mention the <a href="http://railsforzombies.org">Rails for
Zombies</a> session.</p>

<p>Within a short time, I was up and running with an application I could use to
tweak and learn all-things-rails! However, this is not simply what I wanted.
I wanted to learn new ways &ndash; the tools &ndash; wanted to learn BDD, easy
deployments, and things alike.</p>

<p>So, I next started learning how to use capybara for my BDD needs. BDD is
awesome &ndash; since I can simply write what I wanted and every time I could just
look up what test is failing and write the code for it &ndash; it keeps me on track
with what needs to be done next, and while doing so definitely, takes away the
pain associated with manually testing the application. I guess, the Rails
Introduction tutorial I mentioned above, also, deals with setting up Capybara
with RSpec for testing purposes.</p>

<p>Soon, I found out using Cucumber will further help me be more expressive, and
concise while being forgiving on my clients. So, I started finding out how to
integrate Capybara with Cucumber and <a href="http://net.tutsplus.com/tutorials/ruby/ruby-for-newbies-testing-web-apps-with-capybara-and-cucumber/">this
screencast</a>
really helped me along with Google searches.</p>

<p>So, now I had Cucumber working along with Capybara, but yet I have always
loved the work done by <a href="http://thoughtbot.com/community/">ThoughtBot Studio</a>
and wanted to utilize Factory Girl in my tests &ndash; so, I started searching and
I guess <a href="http://collectiveidea.com/blog/archives/2010/09/09/practical-cucumber-factory-girl-steps/">this is the
post</a>
that really helped me with getting Factory Girl fixtures to work with my
Cucumber features.</p>

<p>At the end, I would say:</p>

<blockquote><p>I am very new to RubyOnRails world, and wanted to simply pen down my
thoughts about this awesome community at around 6 AM while I am all
exhausted. I would keep updating this post with my thoughts on how I am
learning things in the RubyOnRails world.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anonymous Proxy with Squid]]></title>
    <link href="http://nikhgupta.com/blog/2012/02/12/setting-up-anonymous-proxy-with-squid/"/>
    <updated>2012-02-12T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2012/02/12/setting-up-anonymous-proxy-with-squid</id>
    <content type="html"><![CDATA[<p>Recently, I <a href="Installing%20Squid%20Proxy%20Server%20on%0ACentos%205%20VPS">set up a Squid Proxy Server</a>, however when I tried to check my IP address, I found that it
was easy for such a service to detect that I am using a proxy server. But,
I really wanted  anonymity and privacy when I use internet for my peculiar
uses, and hence, I tried to setup an anonymous proxy with squid, which nearly
makes my real IP address untraceable. This post lays down the steps, I used
for setting up this Squid Proxy Server.</p>

<!-- more -->


<p>Lets, first ensure that the cache is not active on certain file types and
certain domains. You must copy the following lines where you find the
<code>hierarchy_stoplist</code> directive in the Squid Configuration file or at the very
bottom of it)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># deny cache</span>
</span><span class='line'>hierarchy_stoplist cgi-bin ?
</span><span class='line'>acl QUERY urlpath_regex cgi-bin <span class="se">\?</span> <span class="se">\.</span>css
</span><span class='line'>no_cache deny QUERY
</span><span class='line'>acl NOT_TO_CACHE dstdomain <span class="s2">&quot;/etc/squid/list/not-to-cache.conf&quot;</span>
</span><span class='line'>no_cache deny NOT_TO_CACHE
</span></code></pre></td></tr></table></div></figure>


<p>This will disable cache on any page that uses cgi scripts or has a query
parameter or is a css file. Furthermore, we can add domains to
<code>/etc/squid/list/not-to-cache.conf</code> file &ndash; one domain per line &ndash; which will
not be cached by Squid afterwards.</p>

<p>Next, add up all the IPs which will be exposed to the outer world (the
following line must go in <code>/etc/squid/squid.conf</code> file at the very bottom):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>acl ip1 myip XXX.XXX.XXX.XXX
</span><span class='line'>tcp_outgoing_address XXX.XXX.XXX.XXX ip1
</span><span class='line'>acl ip2 myip XXX.XXX.XXX.YYY
</span><span class='line'>tcp_outgoing_address XXX.XXX.XXX.YYY ip2
</span><span class='line'>acl ip3 myip XXX.XXX.XXX.ZZZ
</span><span class='line'>tcp_outgoing_address XXX.XXX.XXX.ZZZ ip3
</span></code></pre></td></tr></table></div></figure>


<p>The above will allow us to use any of the above IP address in our browser as a proxy and the corresponding <code>tcp_outgoing_address</code> will be displayed to the world.</p>

<p>Next, add the following rules to very bottom of the Squid Configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ANONYMOUS PROXY</span>
</span><span class='line'>forwarded_for off
</span><span class='line'>request_header_access Allow allow all
</span><span class='line'>request_header_access Authorization allow all
</span><span class='line'>request_header_access WWW-Authenticate allow all
</span><span class='line'>request_header_access Proxy-Authorization allow all
</span><span class='line'>request_header_access Proxy-Authenticate allow all
</span><span class='line'>request_header_access Cache-Control allow all
</span><span class='line'>request_header_access Content-Encoding allow all
</span><span class='line'>request_header_access Content-Length allow all
</span><span class='line'>request_header_access Content-Type allow all
</span><span class='line'>request_header_access Date allow all
</span><span class='line'>request_header_access Expires allow all
</span><span class='line'>request_header_access Host allow all
</span><span class='line'>request_header_access If-Modified-Since allow all
</span><span class='line'>request_header_access Last-Modified allow all
</span><span class='line'>request_header_access Location allow all
</span><span class='line'>request_header_access Pragma allow all
</span><span class='line'>request_header_access Accept allow all
</span><span class='line'>request_header_access Accept-Charset allow all
</span><span class='line'>request_header_access Accept-Encoding allow all
</span><span class='line'>request_header_access Accept-Language allow all
</span><span class='line'>request_header_access Content-Language allow all
</span><span class='line'>request_header_access Mime-Version allow all
</span><span class='line'>request_header_access Retry-After allow all
</span><span class='line'>request_header_access Title allow all
</span><span class='line'>request_header_access Connection allow all
</span><span class='line'>request_header_access Proxy-Connection allow all
</span><span class='line'>request_header_access User-Agent allow all
</span><span class='line'>request_header_access Cookie allow all
</span><span class='line'>request_header_access All deny all
</span></code></pre></td></tr></table></div></figure>


<p>Once, this is all done &ndash; check the configuration and restart Squid:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chkconfig --level 2345 squid on
</span><span class='line'>/etc/init.d/squid restart
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Squid Proxy Server on VPS]]></title>
    <link href="http://nikhgupta.com/blog/2012/02/12/installing-squid-proxy-server-on-centos-5-vps/"/>
    <updated>2012-02-12T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2012/02/12/installing-squid-proxy-server-on-centos-5-vps</id>
    <content type="html"><![CDATA[<p>I wanted to browse the internet using a proxy for a variety of reasons. So,
I decided to give it a go using the Squid Proxy Server, which I could easily
setup on my own VPS Server, and manage it in whatever way I wanted.
Personally, I wanted to be able to browse using few different IPs using a HTTP
authentication.</p>

<p>Therfore, in this post, I layout the steps needed to configure squid proxy
server over a Centos5 server.</p>

<!-- more -->


<p>Please, note that all the following commands need to be run as <code>root</code>.</p>

<p>First, we need to <strong>install Squid</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install squid -y
</span></code></pre></td></tr></table></div></figure>


<p>Next up, we need to <strong>change the Squid Configuration</strong> to allow access from
authenticated persons. To do this, we need to add the corresponding ACLs and
http_access rules in <code>/etc/squid/squid.conf</code> file (at the very top of the file,
should do):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># add auth_params</span>
</span><span class='line'>auth_param basic program /usr/lib/squid/ncsa_auth /etc/squid/passwd
</span><span class='line'>auth_param basic children 2
</span><span class='line'>auth_param basic realm My Proxy Server
</span><span class='line'>auth_param basic credentialsttl 24 hours
</span><span class='line'>auth_param basic casesensitive off
</span><span class='line'><span class="c"># add acl rules</span>
</span><span class='line'>acl users proxy_auth REQUIRED
</span><span class='line'><span class="c"># http access rules</span>
</span><span class='line'>http_access deny !users
</span><span class='line'>http_access allow users
</span></code></pre></td></tr></table></div></figure>


<p>Next, <strong>create our authentication file</strong> which Squid can use to verify for
user authentications:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>touch /etc/squid/passwd
</span><span class='line'>chown root.squid /etc/squid/passwd
</span><span class='line'>chmod 640 /etc/squid/passwd
</span></code></pre></td></tr></table></div></figure>


<p>Lets, <strong>add a user</strong> which can access this squid server (if you get a warning
that says it can not find the command: <code>htpasswd</code>, try to run the commented
command, instead):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>htpasswd /etc/squid/passwd username
</span><span class='line'><span class="c"># /usr/local/apache/bin/htpasswd /etc/squid/passwd username</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we <strong>restart the squid server</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># check if startup config is okay</span>
</span><span class='line'>chkconfig --level 2345 squid on
</span><span class='line'>/etc/init.d/squid restart
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can simply connect to this squid server, by <strong>defining the relevant proxy in the browser</strong> :)</p>

<h3>Bonus</h3>

<p>If you want to <a href="Setting%20up%20Anonymous%20Proxy%0Awith%20Squid">setup Anonymous Proxy with Squid</a>  in order to increase privacy and anonymity, make sure you check
that link ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Puppet]]></title>
    <link href="http://nikhgupta.com/blog/2011/12/23/installing-puppet-on-master-and-client/"/>
    <updated>2011-12-23T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2011/12/23/installing-puppet-on-master-and-client</id>
    <content type="html"><![CDATA[<p>This post details the steps/instructions to install the puppet and also,
connect the client to the master.</p>

<p><strong>These instructions are for my own record keeping purposes.</strong></p>

<!-- more -->


<ul>
<li>On <strong>Master</strong> and <strong>Client</strong>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># update our ubuntu</span>
</span><span class='line'>sudo apt-get update
</span><span class='line'>
</span><span class='line'><span class="c"># install ruby and ruby-dev</span>
</span><span class='line'>sudo apt-get install irb libopenssl-ruby libreadline-ruby ruby ruby-dev
</span><span class='line'>
</span><span class='line'><span class="c"># install and update rubygems</span>
</span><span class='line'><span class="nb">cd</span> /usr/local/src
</span><span class='line'>sudo wget http://production.cf.rubygems.org/rubygems/rubygems-1.5.2.tgz
</span><span class='line'>sudo tar -xzf rubygems-1.5.2.tgz
</span><span class='line'><span class="nb">cd </span>rubygems-1.5.2
</span><span class='line'>sudo ruby setup.rb
</span><span class='line'>sudo update-alternatives --install /usr/bin/gem gem /usr/bin/gem1.8 1
</span><span class='line'>sudo gem update --system
</span><span class='line'>
</span><span class='line'><span class="c"># install puppet</span>
</span><span class='line'>gem install puppet --no-ri --no-rdoc
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Make sure that the client and the master can ping each other on network, or
better yet setup SSH access from/to master.</p></li>
<li><p>On <strong>Master</strong>:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># download puppet configuration</span>
</span><span class='line'><span class="nb">cd</span> /etc
</span><span class='line'>sudo wget http://bitfieldconsulting.com/files/powering-up-with-puppet.tar.gz
</span><span class='line'>sudo tar -xzf powering-up-with-puppet.tar.gz
</span><span class='line'>
</span><span class='line'><span class="c"># start puppet daemon, along with users</span>
</span><span class='line'>sudo puppet master --mkusers --verbose --no-daemonize
</span><span class='line'><span class="c"># file ownership fix, if required</span>
</span><span class='line'>chown -R puppet:puppet /var/lib/puppet
</span><span class='line'>
</span><span class='line'><span class="c"># start puppet master</span>
</span><span class='line'>sudo puppet master
</span><span class='line'>
</span><span class='line'><span class="c"># check puppet</span>
</span><span class='line'>sudo puppet agent --test --server<span class="o">=</span><span class="sb">`</span>hostname<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>On <strong>Client</strong>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># connect with mast to get certificate</span>
</span><span class='line'>puppet agent --server<span class="o">=</span>&amp;lt;puppetmaster&amp;gt; --waitforcert 60 --test
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>On <strong>Master</strong>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># check the cert requests and grant cert to client</span>
</span><span class='line'>sudo puppetca list
</span><span class='line'>sudo puppetca sign &amp;lt;puppetclient&amp;gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XSLT: auto incrementing a variable]]></title>
    <link href="http://nikhgupta.com/blog/2011/07/31/xslt-auto-incrementing-a-variable/"/>
    <updated>2011-07-31T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2011/07/31/xslt-auto-incrementing-a-variable</id>
    <content type="html"><![CDATA[<p>Recently, while utilizing XSLT for one of my projects, I came across this
issue when I needed to auto-increment a variable for my records. After a bit
of Google searching, I came across a somewhat usable method, which I improved
upon to get this:</p>

<!-- more -->


<p>We first insert a node in our XSL under the node where we want the variable to
be auto-incremented:</p>

<figure class='code'><figcaption><span>Position The Variable start:1 mark:4-5</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xsl:stylesheet</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span> <span class="na">xmlns:xsl=</span><span class="s">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;xsl:template</span> <span class="na">match=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;flickrGallery&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;xsl:variable</span> <span class="na">name=</span><span class="s">&quot;my_var&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;xsl:value-of</span> <span class="na">select=</span><span class="s">&quot;position()&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/xsl:variable&gt;</span>
</span><span class='line'><span class="nt">&lt;xsl:for-each</span> <span class="na">select=</span><span class="s">&quot;//photo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    ...
</span></code></pre></td></tr></table></div></figure>


<p>Now, we will actually be printing the value of this variable as below:</p>

<figure class='code'><figcaption><span>print the value of the variable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xsl:attribute</span> <span class="na">name=</span><span class="s">&quot;rel&quot;</span><span class="nt">&gt;</span>flickr<span class="nt">&lt;xsl:copy-of</span> <span class="na">select=</span><span class="s">&quot;$my_var&quot;</span> <span class="nt">/&gt;&lt;/xsl:attribute&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quattro and its Colophon]]></title>
    <link href="http://nikhgupta.com/blog/2011/07/31/quattro-responsive-wordpress-theme-colophon/"/>
    <updated>2011-07-31T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2011/07/31/quattro-responsive-wordpress-theme-colophon</id>
    <content type="html"><![CDATA[<p>So, Yeah! I know. I switched to <a href="http://jekyllrb.com/">Jekyll</a>  for a very
short phase, owing to the attraction it has to developers and &lsquo;blog-hackers&rsquo;.
But, then, I soon started missing some of the advanced  functionality
provided by WordPress, such as custom fields, granular designs, post formats,
custom posts, etc.</p>

<p>So, I finally switched back to WordPress. The old Jekyll site can still be
seen on: <a href="http://nikhgupta.github.com">Github Pages</a>, which will, from now on,
only host documentations about my <a href="https://github.com/nikhgupta/repositories">Github public
repositories</a>.</p>

<!-- more -->


<p>When I switched to WordPress, I found myself converting the previous template
again for WordPress, which was not what I really wanted to do, since it was
boooooring! And, hence, I decided to create a new WordPress theme which will
have some of the advanced functionality, I wanted, along with a unique design.</p>

<p>I named the theme <strong>Quattro</strong>, owing to the heavy usage of the font:
<strong>Quattrocento</strong> for primary styling, by this theme. Moreover, I wanted this
theme to be HTML5 and CSS3 ready. So, I, carefully, selected the <a href="http://nathanstaines.com/archive/starkers-html5">Starkers
HTML5 theme</a>  framework by
<a href="Nathan%20Staines">Nathan Staines</a>  as the base framework for this theme.</p>

<!--
### Screenshots
[gallery columns="4"]
-->


<h3>Responsive Web Design</h3>

<p>This theme utilizes the concept of
<a href="http://www.w3.org/TR/css3-mediaqueries/">media-queries</a> and <a href="http://www.alistapart.com/articles/responsive-web-design/">responsive web
design</a>  to target
devices with specific max-width. Try resizing your browser window and the
theme will try to adjust according to your browser width. Nice, right?</p>

<p>Well, there is more to it. The real benefit of this design layout is seen when
you will try to visit this site using a mobile browser, for example. The
design adjusts itself to fit the narrow width of the mobile browser, as
opposed to displaying a design which was, initially, designed for a 1200+ px
wide screen. :)</p>

<h3>Post Formats</h3>

<p>This theme makes extensive use of <a href="http://codex.wordpress.org/Post_Formats">WordPress post
formats</a> to render different post
formats in different styles. For example, a post with a post format of Gallery
is displayed to be, specifically, displayed as a photo gallery. The following
post formats are defined for this theme (and the description tells how these
formats are implemented in this theme):</p>

<ul>
<li><strong>Aside</strong>: Styled without a title. Similar to a Facebook note update.</li>
<li><strong>Gallery</strong>: A gallery of images.</li>
<li><strong>Image</strong>: A single image. This image is not linked to its attachment page.</li>
<li><strong>Quote</strong>: A quotation. Stylized in Orange text. Quote author is displayed
for this quote.</li>
<li><strong>Status</strong>: A short status update, similar to a Twitter status update.
Update date is displayed for this status, e.g. <a href="http://nikhgupta.com/status-updates/a-responsive-design/">this status
update</a>.</li>
</ul>


<p>Moreover, this theme makes use of two more post formats (well, they are not
actually post formats, but a similar functionality is achieved by using
<a href="http://codex.wordpress.org/Custom_Fields">Custom Fields</a>  and <a href="http://wordpress.org/extend/plugins/j-flickr/">J-Flickr
plugin for WordPress</a>):</p>

<ul>
<li><strong>Flickr Gallery</strong>: similar to Gallery post format. Except that, the images
for this gallery are directly fetched from a Flickr photoset, or photo
collection.    This gallery is
<a href="http://www.lokeshdhakar.com/projects/lightbox2/">lightbox</a>  aware. Also,
a single gallery can contain more than one photosets or photo collections.</li>
<li><strong>Flickr Images</strong>: similar to Images post format. Except that, the image is
directly fetched from Flickr. These posts can contain more than one images.
Ideally, a Flickr Gallery is for photosets, and Flickr Images is for photos.</li>
</ul>


<h3>Home Page (Content Slider)</h3>

<p>If you noticed the <a href="http://nikhgupta.com/">homepage</a>, it is made up of a content slider, which
uses <a href="http://bxslider.com">bxSlider</a> to create the sliding content effect
using <a href="http://jquery.com">jQuery</a>. This content slider is enabled as a <a href="http://codex.wordpress.org/Pages#Page_Templates">Page
Template</a> and hence, allows
me to re-use it for more pages.</p>

<h3>ToDo List</h3>

<ul>
<li>Add support for Tasks (ToDo Lists)  <a href="http://bxslider.com/">Custom Post Type</a></li>
<li>Add various shortcodes for easy styling and for download buttons, etc.</li>
<li>Add post format: <strong>Chat</strong></li>
<li><del datetime="2011-07-31T06:37:58+00:00">Display related posts on 404 pages</del></li>
<li>Also, post to Facebook and Twitter when a status update is made.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initializing gitolite repositories]]></title>
    <link href="http://nikhgupta.com/blog/2011/07/31/initialize-gitolite-bash-script/"/>
    <updated>2011-07-31T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2011/07/31/initialize-gitolite-bash-script</id>
    <content type="html"><![CDATA[<p>This script creates a git repository in the current directory, syncs it with
the Gitolite server (and also, the Github &ndash; optional) and all the regular
mumbo-jumbo when setting up the Git repository for the first time for
a particular folder.</p>

<!--more-->




<div><script src='https://gist.github.com/7077610.js'></script>
<noscript><pre><code>#!/bin/bash

GITOLITE_ADMIN_DIR=/home/$USERNAME/workspace/gitolite-admin
GITOLITE_CONF=$GITOLITE_ADMIN_DIR/conf/gitolite.conf
GITSERVER=gitserver
SSHSTRING=&quot;ssh root@vps&quot;
PATHTOREPOS=&quot;/home/develop/repositories&quot;
GITHUB_USER=$USERNAME
GITHUB_TOKEN=&quot;&amp;lt;GITHUBTOKEN&amp;gt;&quot;
#REMOTENAMES=&quot;origin gitolite&quot; # $GITSERVER is always added as a REMOTENAME

function oneline_usage() {
    echo $&quot;Usage: init-gitolite.sh [-ghdvV0] [-r repo_macro] [dirname] [reponame]&quot;
    exit 999
}
function version() {
    echo -e $&quot;Gitolite init script\nVersion 1.1\nby Nikhil Gupta\n[me@nikhgupta.com]&quot;
    exit 999
}

function error { show_success 0 &quot;failed&quot; &quot;$1&quot;; }
function warn { show_success 1 &quot;warning&quot; &quot;$1&quot;; }
function success { show_success 2 &quot;success&quot; &quot;$1&quot;; }
function die { show_success 3 &quot;aborted&quot; &quot;$1&quot;; exit 999; }

function show_success() {
    # Parameters: condition_check (0|1|2|3), warn|fail|success|abort, [desc]
    # Parameters: condition_check (0|1|2|3), message, [desc]
    message=( $(echo &quot;$2&quot; | tr &#39;|&#39; &#39; &#39;) ); message=&quot;${message[$1]}&quot;; message=${message:-&quot;$2&quot;}
    color=( &quot;${RED}&quot; &quot;${YLW}&quot; &quot;${GRN}&quot; &quot;${RED}&quot; )
    desc=( &quot;_Error_&quot; &quot;Warning&quot; &quot;Success&quot; &quot;ABORTED&quot;)
    if (( $COLORCODES )); then desc=&quot;${color[$1]}${desc[$1]}!${NML} $3&quot; ; else desc=&quot;${desc[$1]}! $3&quot;; fi
    [ -n &quot;$3&quot; ] &amp;amp;&amp;amp; echo -ne &quot;${desc}&quot;;
    if (( $COLORCODES )); then tput hpa $COL; echo -e &quot;${color[$1]}[ ${message} ]${NML}&quot;;
    else printf &quot;\n%${COL}s\n&quot; &quot;...[ ${message} ]&quot;; fi
}
function check_requirements() {
    type -P sed &amp;amp;&amp;gt;/dev/null || die &quot;I require &#39;sed&#39; but it&#39;s not installed.&quot;
    type -P grep &amp;amp;&amp;gt;/dev/null || die &quot;I require &#39;grep&#39; but it&#39;s not installed.&quot;
    type -P tput &amp;amp;&amp;gt;/dev/null || die &quot;I require &#39;tput&#39; but it&#39;s not installed.&quot;
    type -P git &amp;amp;&amp;gt;/dev/null || die &quot;I require &#39;git&#39; but it&#39;s not installed.&quot;
    # check if the gitolite-admin directory is actually present
    [ -w &quot;$GITOLITE_CONF&quot; ] || die &quot;can not read/write gitolite configuration file..&quot;
    # check if a git repository already exists for this repo
    [ -d &quot;$REPO_DIR/.git&quot; ] &amp;amp;&amp;amp; die &quot;a git repository already exists for this location!&quot;
}
function GIT() {
    GIT_DIR=&quot;$1&quot;; shift;
    SUCCESS=&quot;$1&quot;; shift;
    FAILURE=&quot;$1&quot;; shift;
    GIT=&quot;git --git-dir=${GIT_DIR}/.git --work-tree=${GIT_DIR}&quot;
    if (( $VERBOSE )) || [ &quot;$SUCCESS&quot; == &quot;NIL&quot; ]; then
        if $GIT &quot;$@&quot;; then
            [ &quot;$SUCCESS&quot; != &quot;NIL&quot; ] &amp;amp;&amp;amp; success &quot;$SUCCESS&quot;;
        else
            [ &quot;$FAILURE&quot; != &quot;NIL&quot; ] &amp;amp;&amp;amp; die &quot;$FAILURE&quot;;
        fi
    else
        if $GIT &quot;$@&quot; 1&amp;gt;/dev/null; then
            [ &quot;$SUCCESS&quot; != &quot;NIL&quot; ] &amp;amp;&amp;amp; success &quot;$SUCCESS&quot;;
        else
            [ &quot;$FAILURE&quot; != &quot;NIL&quot; ] &amp;amp;&amp;amp; die &quot;$FAILURE&quot;;
        fi
    fi
}
function delete_repo() {
    REPO_NAME=&quot;`GIT &quot;$REPO_DIR&quot; &quot;NIL&quot; &quot;NIL&quot; remote -v show | grep &quot;gitserver:&quot; | head -1 | cut -f2 | cut -f1 -d&#39; &#39; | cut -f2 -d&#39;:&#39; | cut -f1 -d&#39;.&#39;`&quot;
    [ -n &quot;$REPO_NAME&quot; ] || die &quot;Could not extract remote repository name...&quot;
    sed -e &quot;s|${REPO_NAME} ||g&quot; -i $GITOLITE_CONF &amp;amp;&amp;amp; success &quot;made changes to gitolite configuration file..&quot;
    rm -rf $REPO_DIR/.git/ &amp;amp;&amp;amp; success &quot;removed local git repository..&quot;
    $SSHSTRING &quot;rm -rf $PATHTOREPOS/$REPO_NAME.git&quot; &amp;amp;&amp;amp; success &quot;removed gitolite server repository for this repository..&quot;
    (( $GITHUB_REPO )) &amp;amp;&amp;amp; token=$(curl -X POST -su &quot;$GITHUB_USER/token:$GITHUB_TOKEN&quot; http://github.com/api/v2/json/repos/delete/$GITHUB_USER/&quot;$REPO_NAME&quot; | cut -f4 -d&#39;&quot;&#39;)
    curl -d &quot;delete_token=${token}&quot; -su &quot;$GITHUB_USER/token:$GITHUB_TOKEN&quot; http://github.com/api/v2/json/repos/delete/$GITHUB_USER/&quot;$REPO_NAME&quot; &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; success &quot;Removed Github repository at: http://github.com/$GITHUB_USER/$REPO_NAME&quot;
}

while getopts &quot;:dgvV0r:&quot; options
do
    case $options in
        d) DELETE_REPO=1;;
        g) GITHUB_REPO=1;;
        v) VERBOSE=1;;
        0) COLORCODES=0;;
        r) REPO_MACRO=&quot;$OPTARGS&quot;;;
        V) version;;
        h) oneline_usage;;
        *) oneline_usage;;
    esac
done
shift $(($OPTIND - 1))

DELETE_REPO=${DELETE_REPO:-0}
GITHUB_REPO=${GITHUB_REPO:-0}
VERBOSE=${VERBOSE:-0}
SHORTUSAGE=${SHORTUSAGE:-0}
COLORCODES=${COLORCODES:-1}
(( $COLORCODES )) &amp;amp;&amp;amp; BLD=$(tput bold)
(( $COLORCODES )) &amp;amp;&amp;amp; NML=$(tput sgr0)
(( $COLORCODES )) &amp;amp;&amp;amp; RED=$BLD$(tput setaf 1)
(( $COLORCODES )) &amp;amp;&amp;amp; GRN=$BLD$(tput setaf 2)
(( $COLORCODES )) &amp;amp;&amp;amp; YLW=$BLD$(tput setaf 3)
(( $COLORCODES )) &amp;amp;&amp;amp; BLU=$BLD$(tput setaf 6)
COL=$(tput cols); let COL=COL-16

# check back which repo macro is the one, the user wants to add the repository in
case $REPO_MACRO in
    pr) REPO_MACRO=&quot;public-readable&quot;;;
    pw) REPO_MACRO=&quot;public-writable&quot;;;
    nr) REPO_MACRO=&quot;nikhgupta-repos&quot;;;
    cw) REPO_MACRO=&quot;client-works&quot;;;
    64) REPO_MACRO=&quot;inpiron-1564-repos&quot;;;
esac
REPO_MACRO=${REPO_MACRO:-&quot;inspiron-1564-repos&quot;}

# if no directory is given create git repository in current directory
REPO_DIR=${1:-&quot;$(pwd)&quot;}
# if no name is given, create name based on directory name
REPO_NAME=&quot;${REPO_DIR##*/}&quot;
REPO_NAME=&quot;${2:-$REPO_NAME}&quot;

# delete git repository if requested
(( $DELETE_REPO )) &amp;amp;&amp;amp; { delete_repo; exit 900; }

# check our requirements
check_requirements

# Pull changes from Gitolite server
GIT &quot;$GITOLITE_ADMIN_DIR&quot; &quot;fetched changes from gitolite server..&quot; &quot;cannot fetch changes from Gitolite server..&quot; fetch -v origin master

# backup our existing Gitolite Configuration file
cp $GITOLITE_CONF $GITOLITE_CONF.bak &amp;amp;&amp;amp; success &quot;backed up existing gitolite configuration file..&quot;

# make changes to our Gitolite Configuration file, if needed.
sed -e &#39;s/\(@&#39;&quot;$REPO_MACRO&quot;&#39;.*\) #/\1 &#39;&quot;$REPO_NAME&quot;&#39; #/g&#39; -i $GITOLITE_CONF &amp;amp;&amp;amp; success &quot;made changes to gitolite configuration file..&quot;

GIT &quot;$GITOLITE_ADMIN_DIR&quot; &quot;Added untracked files in &#39;gitolite-admin&#39; repo&quot; &quot;Failed to add untracked files in &#39;gitolite-admin&#39; repository&quot; add .
GIT &quot;$GITOLITE_ADMIN_DIR&quot; &quot;Added a new commit for this Gitolite change&quot; &quot;Failed to make a commit for this Gitolite change&quot; commit -am &quot;Added repo: $REPO_NAME&quot;
GIT &quot;$GITOLITE_ADMIN_DIR&quot; &quot;Pushed &#39;gitolite-admin&#39; repository to Gitolite server&quot; &quot;Failed to push &#39;gitolite-admin&#39; repository to Gitolite server&quot; push origin master
if ssh $GITSERVER 2&amp;gt;/dev/null | tail -n +3 | cut -f2 | grep -q &quot;$REPO_NAME&quot;; then success &quot;Created a new bare repository on Gitolite server&quot;;
else die &quot;Failed to find a reference of the new repository on Gitolite server&quot;; fi

GIT &quot;$REPO_DIR&quot; &quot;Initialized new repository in &#39;${REPO_DIR}&#39;&quot; &quot;Failed to initilialize new repository in &#39;${REPO_DIR}&#39;&quot; init
GIT &quot;$REPO_DIR&quot; &quot;Added untracked files in repository for tracking&quot; &quot;Failed to add untracked files in repository&quot; add .
GIT &quot;$REPO_DIR&quot; &quot;Made the first commit with Gitolite server&quot; &quot;Failed to make the first commit&quot; commit -am &quot;First Sync with Gitolite Server&quot;

#for REMOTE in $REMOTENAMES ; do
# GIT &quot;$REPO_DIR&quot; &quot;Added remote branch with name: $REMOTE&quot; &quot;Failed to add a remote branch&quot; remote add $REMOTE $GITSERVER:$REPO_NAME.git
#done
GIT &quot;$REPO_DIR&quot; &quot;Added remote branch with name: gitserver&quot; &quot;Failed to add a remote branch&quot; remote add $GITSERVER $GITSERVER:$REPO_NAME.git

GIT &quot;$REPO_DIR&quot; &quot;Pushed the new repository to Gitolite server&quot; &quot;Failed to push the new repository to Gitolite server&quot; push $GITSERVER --all

if (( $GITHUB_REPO )); then
    curl -d &quot;name=$REPO_NAME&quot; -su &quot;${GITHUB_USER}/token:${GITHUB_TOKEN}&quot; http://github.com/api/v2/json/repos/create &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; success &quot;created a github repository at: http://github.com/$GITHUB_USER/$REPO_NAME&quot;
    GIT &quot;$REPO_DIR&quot; &quot;Added Remote branch with name: Github&quot; &quot;Failed to add a remote branch for Github&quot; remote add github git@github.com:$GITHUB_USER/$REPO_NAME.git
    GIT &quot;$REPO_DIR&quot; &quot;Pushed the new repository to Github server&quot; &quot;Failed to push the new repository to Github server&quot; push github --all
fi

touch $REPO_DIR/.git/$TRACK_FILE &amp;amp;&amp;amp; success &quot;Created .git/$TRACK_FILE file for preventing re-run of this script&quot;
success &quot;INITIALIZED LOCAL REPO AND SYNCED WITH GITOLITE REPO!!&quot;
echo &quot;--------------------------------------------&quot;
echo &quot;git clone $GITSERVER:$REPO_NAME&quot;
if [ &quot;$3&quot; == &quot;github&quot; ]; then
    echo &quot;git clone $GITHUB_REPO&quot;
fi
echo &quot;--------------------------------------------&quot;
echo -e &quot;\t${BLU}Completed${NML}.&quot;</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Graylog2 on Ubuntu 11.04]]></title>
    <link href="http://nikhgupta.com/blog/2011/07/09/installing-graylog2-on-ubunty-natty-11-04/"/>
    <updated>2011-07-09T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/blog/2011/07/09/installing-graylog2-on-ubunty-natty-11-04</id>
    <content type="html"><![CDATA[<p>Alright, so I wanted to install a <a href="http://graylog2.org">Graylog2</a> server on my
Ubuntu Natty for managing various system logs, custom tasks output, and
specially capturing <a href="http://rubyonrails.org">Rails</a> exceptions.  Configuring
a Graylog2 instance to run on Ubuntu was bit of a daunting task, but I,
finally, have it &ndash; installed, running and logging :) And, I must say, this is
a beauty &ndash; the dashboard, the filters, analytics and what not &ndash; in a very
clean, elegant Rails UI &ndash; heavily pink in color ;)</p>

<p>We need Java since Graylog2 server utilizes the awesome performce of it. We
need MongoDB for thats the database our logs would be saved into. And,
o&#8217;course, we need Ruby to run our web interface.</p>

<!-- more -->


<h3>Installing Java &amp; MongoDB</h3>

<p>Java and MongoDB are both available via APT/Synaptic.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install openjdk-6-jre mongodb
</span></code></pre></td></tr></table></div></figure>


<h3>Installing Graylog2 Server</h3>

<p>The commands below will download the graylog2 server, unzip it and copy the
configuration file, as needed. Finally, it will run MongoDB shell.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="nv">$HOME</span>
</span><span class='line'>mkdir -p <span class="nv">$HOME</span>/.graylog2
</span><span class='line'><span class="nb">cd</span> <span class="nv">$HOME</span>/.graylog2
</span><span class='line'>wget https://github.com/downloads/Graylog2/graylog2-server/graylog2-server-0.9.5p1.tar.gz
</span><span class='line'>tar xzf graylog2-server-0.9.5p1.tar.gz
</span><span class='line'>sudo cp <span class="nv">$HOME</span>/.graylog2/graylog2-server/graylog2.conf.example /etc/graylog2.conf
</span><span class='line'>mongo
</span></code></pre></td></tr></table></div></figure>


<p>Once we have the shell, type the following commands to configure a database to
be used by Graylog2 Server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>use graylog2
</span><span class='line'>db.addUser<span class="o">(</span><span class="s2">&quot;graylog2&quot;</span>, <span class="s2">&quot;password&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, open your favorite editor and edit the <code>etc/graylog2.conf</code> file with root
access. Change the configuration in there to match the MongoDB, you just
created. Typically, it would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">mongodb_useauth</span> <span class="o">=</span> <span class="s">true</span>
</span><span class='line'><span class="na">mongodb_user</span> <span class="o">=</span> <span class="s">graylog2</span>
</span><span class='line'><span class="na">mongodb_password</span> <span class="o">=</span> <span class="s">password</span>
</span><span class='line'><span class="na">mongodb_host</span> <span class="o">=</span> <span class="s">127.0.0.1</span>
</span><span class='line'><span class="c1"># mongodb_replica_set = localhost:27017,localhost:27018,localhost:27019</span>
</span><span class='line'><span class="na">mongodb_database</span> <span class="o">=</span> <span class="s">graylog2</span>
</span><span class='line'><span class="na">mongodb_port</span> <span class="o">=</span> <span class="s">27017</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once, everything above is configured, we can start our graylog2 server, using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo java -jar /home//.graylog2/graylog2-server/graylog2-server.jar
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully, if you received no error, we can proceed with installing Graylog2 Web Interface.</p>

<h3>Installing Ruby</h3>

<p>Ruby can be installed in many ways. However, I prefer installing Ruby via RVM
and utilizing 1.8.7-p334 branch with Graylog2.  I leave the task of installing
Ruby to the reader.</p>

<h3>Installing Graylog2 Web Interface</h3>

<p>Lets, download the Graylog2 web interface, and run <code>bundle install</code> so as to
install all the gems needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="nv">$HOME</span>/.graylog2
</span><span class='line'>wget https://github.com/downloads/Graylog2/graylog2-web-interface/graylog2-web-interface-0.9.5p2.tar.gz
</span><span class='line'>tar xzf graylog2-web-interface-0.9.5p2.tar.gz
</span><span class='line'><span class="nb">cd </span>graylog2-web-interface-0.9.5p2
</span><span class='line'><span class="o">(</span>rvm use 1.8.7@graylog2<span class="o">)</span>
</span><span class='line'><span class="o">(</span>rvmsudo<span class="o">)</span> gem install bundler
</span><span class='line'><span class="o">(</span>rvmsudo<span class="o">)</span> bundle install
</span></code></pre></td></tr></table></div></figure>


<p>Finally, add the MongoDB configuration to the Web interface (edit <code>config/mongoid.yml</code>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'><span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">27017</span>
</span><span class='line'><span class="l-Scalar-Plain">Username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">graylog2</span>
</span><span class='line'><span class="l-Scalar-Plain">Password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">password</span>
</span><span class='line'><span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">graylog2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you can run the web interface with Rails command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails server -e production
</span></code></pre></td></tr></table></div></figure>


<p>You should now be able to run: <code>http://localhost:3000</code> and see your Graylog2 Web Interface.</p>

<h3>Automating (always-running) Graylog2 instance</h3>

<p>You may, optionally, want to keep the Graylog2 interface always running, while
the above commands will need you to run an instance of graylog2 server and web
interface everytime. Therefore, you can follow the steps below to configure
the Graylog2 instance as always-on.</p>

<h3>Use <a href="http://www.modrails.com/">Passenger</a></h3>

<p>To avoid starting the web interface everytime, you can use Passenger gem by
ModRails. Configuring the passenger server is covered in a lot more details in
the documentations and hence, I am not covering that specific part.</p>

<h3>Use StartUp scripts</h3>

<p>With Ubuntu, you can use startup scripts to run some particular scripts when
the system is started, saving you from running those <code>sudo service .. start</code>
commands after logging in, etc.</p>

<h3>Graylog2 StartUp Script</h3>

<p>Create a file: <code>/etc/init.d/graylog2-server</code> and copy the contents below, in
it.</p>

<div><script src='https://gist.github.com/7079116.js'></script>
<noscript><pre><code>#!/bin/sh
#
# graylog2-server: graylog2 message collector
#
# chkconfig: - 98 02
# description: This daemon listens for syslog and GELF messages and stores them in mongodb
#

CMD=$1
NOHUP=`which nohup`
JAVA_HOME=/usr/java/latest
JAVA_CMD=$JAVA_HOME/bin/java

GRAYLOG2_SERVER_HOME=/opt/graylog2-server

start() {
  echo &quot;Starting graylog2-server ...&quot;
  $NOHUP $JAVA_CMD -jar $GRAYLOG2_SERVER_HOME/graylog2-server.jar &gt; /var/log/graylog2.log 2&gt;&amp;1 &amp;
}

stop() {
  PID=`cat /tmp/graylog2.pid`
  echo &quot;Stopping graylog2-server ($PID) ...&quot;
  kill $PID
}

restart() {
  echo &quot;Restarting graylog2-server ...&quot;
  stop
  start
}

case &quot;$CMD&quot; in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  *)
    echo &quot;Usage $0 {start|stop|restart}&quot;
    RETVAL=1
esac</code></pre></noscript></div>


<p>Now, register the Graylog2-server Init script with startup, and run an instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo update-rc.d graylog2-server defaults
</span><span class='line'>sudo service graylog2-server start
</span></code></pre></td></tr></table></div></figure>


<p><strong>This should get you up and running with a Graylog2 instance. Happy,
loggin!</strong></p>
]]></content>
  </entry>
  
</feed>
