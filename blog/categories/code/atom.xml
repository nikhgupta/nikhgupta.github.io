<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Nikhil Gupta]]></title>
  <link href="http://nikhgupta.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://nikhgupta.com/"/>
  <updated>2014-01-02T21:03:57+05:30</updated>
  <id>http://nikhgupta.com/</id>
  <author>
    <name><![CDATA[Nikhil Gupta]]></name>
    <email><![CDATA[me@nikhgupta.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[wish yourself a happy new year]]></title>
    <link href="http://nikhgupta.com/code/wish-yourself-a-happy-new-year/"/>
    <updated>2014-01-01T01:19:00+05:30</updated>
    <id>http://nikhgupta.com/code/wish-yourself-a-happy-new-year</id>
    <content type="html"><![CDATA[<blockquote><p>Well, before you do that, I will do it from my side: <code>Happy new year to you!</code></p></blockquote>

<p>So, I was just working on somethings, and found this nice little code snippet
that was totally appropriate for this event.</p>

<!-- more -->


<h2>Ruby</h2>

<p>If you are a fan of the ruby (like me), define a function with the following
definition (try, using <code>irb</code> for this purpose):</p>

<p><code>ruby
def encode(str); str.chars.map(&amp;:ord).inject(:+); end
</code></p>

<p>The above function does the following:</p>

<ul>
<li>accept a string as an input</li>
<li>break it into its constituent characters</li>
<li>convert these characters to their ascii integer value</li>
<li>sum up all the integer values and return that sum</li>
</ul>


<p>Nothin' great about that function, right?<br/>
Now, try this in your <code>irb</code> session:</p>

<p><code>ruby
encode "Happy new year to you!"
</code></p>

<p>You will see that the above function is quite intelligent in itself.</p>

<blockquote><p>That little function is empowered with an artificial intelligence by its code,
without any complex mechanisms :)</p></blockquote>

<p>Oh, and here is an alternative:</p>

<p><code>ruby
Happy = Time
Happy.new.year
</code></p>

<h2>Python</h2>

<p>If you are a python fan, instead, try this:</p>

<p><code>python
encode = lambda str: sum(ord(c) for c in str)
encode("Happy new year to you!")
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Domains on Github Pages without fucking up your Emails]]></title>
    <link href="http://nikhgupta.com/code/custom-domains-on-github-pages-without-fucking-up-your-emails/"/>
    <updated>2013-10-27T16:18:00+05:30</updated>
    <id>http://nikhgupta.com/code/custom-domains-on-github-pages-without-fucking-up-your-emails</id>
    <content type="html"><![CDATA[<p>As stated in my post titled <a href="/personal/back-with-a-bang/">Back with a Bang!</a>
(that title, still, amuses me), I have moved from
<a href="http://wordpress.org">WordPress</a> to using <a href="http://octopress.org">Octopress</a> on
Github pages. I was happy with my new blogging configuration, and I think, I am
on schedule with my post updates, till date. However, in making the switch,
I messed up my email configuration while setting up custom domain for this blog.
And, I was not even aware my emails were bouncing off, silently.</p>

<!-- more -->


<p>The <code>nikhgupta.com</code> domain is registered on <a href="http://namecheap.com">Namecheap</a>
(which has been my reliable domain manager, since the very start), and is hosted
on <a href="http://digitalocean.com">DigitalOcean</a> (which is an amazin' host and my
recommendation, these days). I am using <a href="http://zpanelcp.com">ZPanel</a>, since
cPanel is not a necessity for me (I would, rather, install the bare minimum on
my servers).</p>

<p>I must say that this silent bouncing of my emails was my own idiocy, and
therefore, I am writing this post to help anyone who may have gone through the
same.</p>

<h2>Custom Domain on Github Pages</h2>

<p>This has, already, been discussed on <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">this Github Help page</a>,
and therefore, I will not go in details. For summary:</p>

<ul>
<li>Create a repository on GitHub with the name of <code>username.github.com</code>.</li>
<li>Next, clone the Octopress (or Jekyll) repository, and make changes, as
required. My source for the website is in <code>source</code> branch, which is pushed to
the same branch on Github, while my website (real HTML pages) are pushed to
the <code>master</code> branch on Github. This is all managed by Octopress, by default.</li>
<li>Once we push the site (or run <code>bundle exec rake gen_deploy</code> if using
Octopress), our site will be viewable at <code>http://username.github.com</code>.</li>
<li>Next, we add a file named <code>CNAME</code> to our <code>source</code> directory. This file is
a simple text file that just contains one line, the domain name you wish to
use. In my case, <code>nikhgupta.com</code>.</li>
<li>Change the DNS settings for your domain to point to GitHubâ€™s servers. Since,
I was using the root domain name, I had to create <code>A</code> records for the <code>@</code> and
<code>www</code> entries, and point them to Github&rsquo;s IP (<code>204.232.175.78</code>).</li>
</ul>


<h2>Ensuring that Email configuration works</h2>

<p>Did you notice that last step? This is where I messed up my email
configuration. The <code>MX</code> records in my DNS settings for this domain, were
pointing to <code>mail.nikhgupta.com</code>, which in turn was pointing to <code>@</code> entry.</p>

<p>Now, that is what is wrong! The <code>@</code> entry was initially pointing to my server&rsquo;s
IP address, which meant that the incoming mails were being processed by my
server.</p>

<p>When I changed the <code>@</code> entry to point to Github&rsquo;s server, I made Github
responsible for managing my mails. Shit! Here is a snapshot for the change,
I made:</p>

<p><img class="center" src="/images/nikhgupta-dns-a-records-digitalocean.png"></p>

<p>Anyways, now, that I am aware of what is wrong, it is a simple fix. I made the
<code>MX</code> records to point to <code>mail.nikhgupta.com</code> (this was the default), but also
made <code>mail</code> A-record to point to my server&rsquo;s IP address (by adding an <code>A</code>
record).</p>

<p>Below are snapshots for my <code>A</code> and <code>MX</code> records, in their current state:</p>

<p><img class="center" src="/images/nikhgupta-dns-a-records.png">
<img class="center" src="/images/nikhgupta-dns-mx-records.png"></p>

<p>Finally, since I am using DigitalOcean server, I also needed to point the same
A-record to the server&rsquo;s IP using the management console provided by
DigitalOcean.</p>

<p>Now, I only had to wait to let the DNS propogate, and my emails were right back
to where they belonged. :)</p>

<p><strong>Update (05.11.2013)</strong>: It seems that I also needed to point out <code>MX</code> record
inside DigitalOcean&rsquo;s DNS settings to <code>mail.nikhgupta.com.</code> to make this all
work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finally. A self-hosted Gitlab instance!]]></title>
    <link href="http://nikhgupta.com/code/finally-a-self-hosted-gitlab-instance/"/>
    <updated>2013-10-26T13:26:00+05:30</updated>
    <id>http://nikhgupta.com/code/finally-a-self-hosted-gitlab-instance</id>
    <content type="html"><![CDATA[<p>Alright. I seem to be pretty happy today. I think any stupid developer, like me,
would be in the given circumstances. If you are aware about the existance of
a very nifty witchcraft named <a href="http://github.com">Github</a>, then, I am sure you
will be equally happy for me.</p>

<p><strong>Github is magic</strong>. <em>A protective one.</em></p>

<p>For those unaware, Github is a code hosting platform. It allows me to write my
code and then, keep it safe and versioned in their platform. That way, my code
is always there for me. I can share code with other developers, as well as
<em>fork</em> their work and modify it, locally. And, so on. The cool thing is that the
service is really amazing and free for open-source projects.</p>

<!-- more -->


<p>However, there are times when a person needs some privacy, even with the code,
he writes. Especially, with the code, he writes. I, often, used Github&rsquo;s private
repositories for this purpose. But, with a recent project, I was aiming to
create around 100 different private repositories, which was a bit unmanageable
with Github. I know, I know. I must not need that much private repositories.
But, what can I do about it if the project specification itself demand for the
same.</p>

<p>Therefore, I began looking at private repository hosts, and
<a href="http://bitbucket.org">BitBucket</a> seemed to be off, for some reasons. Finally,
I settled on using <a href="http://gitlab.org">GitlabHQ</a> for my purposes. It offered
everything Github had to offer, and more. More in the sense, that I can host
things privately on my own server. Perfect.</p>

<p>And, since I was already using <a href="http://digitalocean.com">DigitalOcean</a> for
hosting my server, and was using Ubuntu 12.10 as my operating system, it became
really easy to install Gitlab on my server. Followed <a href="https://www.digitalocean.com/community/articles/how-to-set-up-gitlab-as-your-very-own-private-github-clone">this
tutorial</a>
from DigitialOcean&rsquo;s community tutorials, and I was up and running with my own
private repository server.</p>

<p>I was, further, planning to install <a href="http://gitlab.org/gitlab-ci">Gitlab CI</a> on
my server, but that seemed to be an overkill, since I do not think I will need
continuous integration for my private projects, and for public projects, we have
another awesome witchcraft named <a href="http://travis-ci.org">Travis CI</a>.</p>

<p>O'course, you can test drive this on <a href="http://git.wickeddevelopers.com">Git @WickedDevelopers</a>.  <br/>
Happy, code browsing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[managing your scripts should not be that hard]]></title>
    <link href="http://nikhgupta.com/personal/code/managing-your-scripts-should-not-be-that-hard/"/>
    <updated>2013-10-23T01:46:00+05:30</updated>
    <id>http://nikhgupta.com/personal/code/managing-your-scripts-should-not-be-that-hard</id>
    <content type="html"><![CDATA[<p>I am, often, found creating simple scripts to automate one or the other part of
my life. Most of the times, I would use a combination of project managers, task
managers, automation tools, and so on to do the tedious work for me. But, at the
other times, it is simply so much more easier to give my inner geek a kick in
the butt and start writing some code which will explicitely be used by me to
handle such one off tasks.</p>

<!-- more -->


<h2>The Problem</h2>

<p>But, here comes the irony, no matter what I try, I end up either misplacing
these little snippets of code, or otherwise it becomes so much tedious to
collect and keep them in an organized manner. Not to mention, the really
annoying part of creating aliases to these nice snippets and then, forgetting
what aliases you, currently, have. Oh, did I mention, I have to keep them online
in a Git repository, so that they are always versioned and sharing them is easy?
And, what if I am booting a new server or working on some other one-time
machine, it would kill me to do a clone of this repository, and then run them
via their full paths, and what if the script does not work on this new machine,
or what if I had to leave meanwhile?</p>

<p>Let me have a quick answer: it is not the 1990s, where the above issues
classified as a GNU license, and nor it is the 2000&rsquo;s, when I did not know how
to create an app dedicated for my own purposes.</p>

<h2>The Solution</h2>

<p>The solution? It&rsquo;s easy. Search for an existing solution or roll out our own.
Unfortunately, I was unable to find an existing solution (or, atleast, I will
pretend the same), and therefore will be rolling out my own, with the following
features:</p>

<ul>
<li>Has a client side gem that can be used to list a user&rsquo;s scripts, and allow him
to copy them in a folder on his machine, and assign aliases to these scripts
on the go.</li>
<li>The gem should be able to search for scripts based on some keywords.</li>
<li>User should be able to have CRUD rights over their scripts. They should be
able to share these scripts, as well as export them. They should be able to
reference another script inside the script they are creating.</li>
<li>All the scripts would be created use Github Gists, and hence, be versioned.</li>
<li>The application should provide an interface to write (and, probably, test) the
scripts on the server, itself. Provide a dedicated backend to the user?</li>
<li>The users should be able to run the scripts on their server via the app
interface, once they have the SSH authentication established? This is not as
straight-forward, since the app server will be the one connecting to the
user&rsquo;s server and hence, it is not safe.</li>
<li>Scripts should have a unique programming structure, which identifies their
requirements and alike, and notifies the user about the same.</li>
<li>Logging should be done on cloud for output of the scripts.</li>
<li>Scripts should be marked as safe based on their MD5 hash, kinda like thor
does for its installed scripts.</li>
<li>Scripts should be intelligent in telling the user when the runtime is not
available, e.g. the user tries to run a ruby script on a server with no-ruby
installed.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim as PHP IDE: Ctags, and Code Browsing]]></title>
    <link href="http://nikhgupta.com/code/using-vim-php-ide-exuberant-ctags-code-browsing/"/>
    <updated>2012-04-01T00:00:00+05:30</updated>
    <id>http://nikhgupta.com/code/using-vim-php-ide-exuberant-ctags-code-browsing</id>
    <content type="html"><![CDATA[<p>So, past few weeks, I have been really fascinated with the all powerful Vim.
And, I often wonder why: I took so much time switching to it? Probably, the
steep learning curve! It has to be.</p>

<p>Anyways, so I have really really progressed with Vim this time, as compared to
my earlier trials. I am quite efficient with Vim now &ndash; even writing this blog
post on it. I know how to move quickly, make efficient uses of search and
replace, using Vim scripts etc. I have really really found plugins like
Gundo, Fugitive, Tagbar, Syntastic, Snipmate, NerdTree, and Powerline to be
useful and not to mention plugins like Vim-Rails which make my day-to-day
tasks easier with a particular language. Oh, and did I mention the incredible
<code>!</code> and <code>@</code> operators? They just rock!</p>

<p>But, well. This post is about using Ctags with Vim to make Vim feel more like
an IDE and readily use Source Code Browsing within frameworks, large code
projects, etc. Here, in this post, I have specified my configuration/process
for using Ctags with MacVim for a CakePHP based project.</p>

<!-- more -->


<h3>The Process</h3>

<p>Well, I would try to create my Ctags on the fly, using Git hooks. This lets me
simply checkout, merge or commit to a branch and my tags would be generated
for the code in question. Moreover, these Ctags generated files are stored
inside <code>.git</code> directory, which keeps our repositories clean (no need to add
a file to <code>.gitignore</code>). Also, I would prefer a centralized place where I can
manage any script I use to create these Ctags, and hence, if after about an
year I think I need a change in the way script is working, or if say I want to
add support for or remove support for a language, I should be able to do it
from a single place and affect all my git repositories using these Ctags
hooks.</p>

<p>For this to work, i.e. for Vim to pick up our Ctags (that will be created in
<code>.git/tags</code> file) we need to have <code>Fugitive</code> installed (which I will really
really recommend anyways). This will make Vim look for Ctags in a <code>.git/tags</code>
and <code>.git/&lt;lang&gt;.tags</code> file in our repository, irrespective of the current
working directory.</p>

<p>Let   s set up a default set of hooks that Git will use as a template when
creating or cloning a repository (requires Git 1.7.1 or newer):</p>

<p><code>bash
git config --global init.templatedir '~/.git_template'
mkdir -p ~/.git_template/hooks
</code></p>

<p>I, usually, put all my Git related stuff in <code>~/Code/__dotfiles/git/</code> and
hence, the above template directory lands up as
<code>~/Code/__dotfiles/git/template/</code> with all the hooks, in my
<a href="http://github.com/nikhgupta/dotfiles">.dotfiles</a> repository.</p>

<p>Now onto the first hook, which isn&rsquo;t actually a hook at all, but rather
a script the other hooks will call. Place in <code>~/.git_template/hooks/ctags</code> and
mark as executable:</p>

<p>``` bash</p>

<h1>!/bin/sh</h1>

<p>rm -f .git/tags ctags &mdash;tag-relative -Rf.git/tags \
  &mdash;exclude=.git &mdash;languages=-javascript,sql
```</p>

<p>Although, make sure that the <code>ctags</code> version is the GNU one, and the above
script runs without showing any errors. If installing via <code>Homebrew</code> make sure
that the <code>which ctags</code> command shows the correct <code>ctags</code> executable path.</p>

<p>Making this a separate script makes it easy to invoke <code>.git/hooks/ctags</code> for
a one-off re-index (or <code>git config --global alias.ctags '!.git/hooks/ctags'</code>,
then <code>git ctags</code>), as well as easy to edit for that special case repository
that needs a different set of options to ctags. For example, I might want to
re-enable indexing for JavaScript or SQL files, which I&rsquo;ve disabled here
because I&rsquo;ve found both to be of limited value and noisy in the warning
department.  And, in these edge cases, all I need is to modify the
corresponding <code>.git/hooks/ctags</code> script in that git repository. Neat and
clean.</p>

<p>We still need to create the actual hooks that the Git will copy to all
repositories that are (re)initialized using the <code>git init</code> command.  All the
files in the <code>~/.git_template/hooks</code> folder needs to be marked as executables.
You should use the following content for: <code>post-commit</code>, <code>post-merge</code>, and
<code>post-checkout</code> hooks (which simply calls the <code>ctags</code> hook, we create above):</p>

<p>``` bash</p>

<h1>!/bin/sh</h1>

<p>.git/hooks/ctags >/dev/null 2>&amp;1 &amp;
```</p>

<p>Additionally, if you feel tags should also be generated on using <code>git rebase</code>,
add the following code to <code>post-rewrite</code> hook:</p>

<p>``` bash</p>

<h1>!/bin/sh</h1>

<p>case &ldquo;$1&rdquo; in
  rebase) exec .git/hooks/post-merge ;;
esac
```</p>

<p>Once, the above is done, all we need to do is to issue a <code>git init</code> command to
create Ctags for an already existing repository. All new git repositories will
automatically include these hooks and hence, will create the Ctags file on the
fly. Pure Automation. ;)</p>

<h3>Global Projects</h3>

<p>There are some projects that I always want available for source code browsing
like the Rails source code itself. For such projects, I would generally run
a one-off shell script that does this work for me, and store the generated
tags file in a directory such as <code>~/.tags/</code> with a suitable name. O'course it
does not make sense to version this directory.</p>

<p>``` bash</p>

<h1>!/usr/bin/env sh</h1>

<p>RubyVersion=&ldquo;1.9.3-p194&rdquo;
LaravelPath=&ldquo;${HOME}/Code/projects/lab/laravel&rdquo;</p>

<p>mkdir -p &ldquo;${HOME}/.ctags&rdquo;</p>

<h1>RVM: Ruby version 1.9.3-p194</h1>

<p>if [ -n &ldquo;${RubyVersion}&rdquo; ]; then
  mkdir -p &ldquo;${HOME}/.ctags/ruby/${RubyVersion}&rdquo;
  TAG_FILE=&ldquo;${HOME}/.ctags/ruby/${RubyVersion}/tags&rdquo;
  rm -f &ldquo;${TAG_FILE}&rdquo;
  for rubydir in <code>find "${HOME}/.rvm/gems" -type d -depth 1 -iname "*${RubyVersion}*"</code>; do</p>

<pre><code>if [ -d "${rubydir}/gems" ]; then
  echo "Looking inside: ${rubydir}/gems"
  ctags --recurse --tag-relative \
    --languages=-javascript,sql \
    --exclude=.git \
    --sort=yes --append \
    -f "${TAG_FILE}" \
    $rubydir/gems/*
fi
</code></pre>

<p>  done
  echo
  echo &ldquo;&mdash;&mdash;&mdash; generated ctags for: ${RubyVersion} &mdash;&mdash;&mdash;&rdquo;
  cat &ldquo;${TAG_FILE}&rdquo; | wc
  echo &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;&rdquo;
  echo
fi</p>

<h1>Laravel</h1>

<p>if [ -n &ldquo;${LaravelPath}&rdquo; -a -d &ldquo;${LaravelPath}&rdquo; ]; then
  mkdir -p &ldquo;${HOME}/.ctags/php/laravel&rdquo;
  TAG_FILE=&ldquo;${HOME}/.ctags/php/laravel/tags&rdquo;
  rm -f &ldquo;${TAG_FILE}&rdquo;
  echo &ldquo;Looking inside: ${LaravelPath}&rdquo;
  ctags &mdash;recurse &mdash;tag-relative \</p>

<pre><code>--languages=-javascript,sql \
--exclude=.git \
--sort=yes --append \
--PHP-kinds=+cf \
--regex-PHP='/abstract class ([^ ]*)/\1/c/' \
--regex-PHP='/interface ([^ ]*)/\1/c/' \
--regex-PHP='/(public |static |abstract |protected |private )+function ([^ (]*)/\2/f/' \
-f "${TAG_FILE}" \
$LaravelPath
</code></pre>

<p>  echo
  echo &ldquo;&mdash;&mdash;&mdash;&mdash; generated ctags for: Laravel &mdash;&mdash;&mdash;&ndash;&rdquo;
  cat &ldquo;${TAG_FILE}&rdquo; | wc
  echo &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;&rdquo;
  echo
fi
```</p>

<p>Finally, I set the following inside my <code>~/.vimrc</code> file:</p>

<p><code>vim
set tags=./tags;/
augroup TagFileType
  autocmd!
  autocmd FileType * setl tags&lt;
  autocmd FileType * exe 'setl tags+=~/.ctags/' . &amp;filetype . '/*/tags'
augroup END
</code></p>

<p>This basically tells vim to only load ctags for the current filetype, i.e. for
a <code>ruby</code> buffer, vim will load all ctags files inside <code>~/.ctags/ruby</code>
directory, and no ctags file inside <code>~/.ctags/php</code></p>

<h3>Epilogue</h3>

<p>(Now, that I have completed writing the post and I read it again, it seems
that this post feels like a rewrite <a href="http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html">a post by tPope</a>. Well,
I was originally thinking of a different way to create these Ctags, but as
I went deeper and deeper, I realized that what
<a href="https://github.com/tpope">tPope</a> describes is so natural and easy, that
I have to ditch whatever it is &ndash; what I was doing now. And, do not forget,
I am less than a month old with Vim and I am talking Ctags with Vim.  I am
allowed to reherse my steps :P )</p>
]]></content>
  </entry>
  
</feed>
