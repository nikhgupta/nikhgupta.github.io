<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: activeadmin | Nikhil Gupta]]></title>
  <link href="http://nikhgupta.com/blog/categories/activeadmin/atom.xml" rel="self"/>
  <link href="http://nikhgupta.com/"/>
  <updated>2015-07-19T14:57:40+05:30</updated>
  <id>http://nikhgupta.com/</id>
  <author>
    <name><![CDATA[Nikhil Gupta]]></name>
    <email><![CDATA[me@nikhgupta.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom Filters using Ransacker in ActiveAdmin Interfaces]]></title>
    <link href="http://nikhgupta.com/code/activeadmin/custom-filters-using-ransacker-in-activeadmin-interfaces/"/>
    <updated>2014-03-12T08:47:00+05:30</updated>
    <id>http://nikhgupta.com/code/activeadmin/custom-filters-using-ransacker-in-activeadmin-interfaces</id>
    <content type="html"><![CDATA[<p>Oh, so, you have tried implementing custom filters in your shiny
<a href="active-admin">ActiveAdmin</a> interface, and probably, have already started
despising the time you have wasted in searching for an answer? Yeah, it happened
to me, as well.</p>

<p>Anyways, this post contains my short notes on using <code>ransacker</code> to create
powerful search patterns in my <a href="active-admin">ActiveAdmin</a> interfaces.
Definitely, <code>ransacker</code> is really powerful. You only need to convert the
incoming search filter (e.g. text or ids or anything else) to an equivalent
attribute in the database, and you are done :)</p>

<!-- more -->


<p>Lets, imagine that we have an <a href="active-admin">ActiveAdmin</a> dashboard, with
a <code>User</code> resource. Our app distinguishes users based on some mysterious logic
as: <code>Active Users</code>, <code>Inactive Users</code>, and <code>New Users</code>. Perfect. But, now,
somehow, I need to filter my users as per this categorization (within AA). And,
this is where normal filtering methods stop working for me. Imagine that the
code present in the <code>User</code> model is somewhere along these lines:</p>

<p>```ruby
class User &lt; ActiveRecord::Base</p>

<p>  # categorize a given user as: :new, :active or :inactive
  def categorize</p>

<pre><code># .. mysterious code..
# .. returns one of the symbols: :new, :active or :inactive.
</code></pre>

<p>  end</p>

<p>end
```</p>

<h3>Step 1: Define the search filter and inputs.</h3>

<p>In order to filter our users based on the above categorization, we first need to
define our filter in AA. This is fairly easy:</p>

<p>```ruby</p>

<h1>app/admin/user.rb</h1>

<p>filter :by_categorization_in, label: &ldquo;Categorization&rdquo;, as: :select, collection: %w[ New Active Inactive ]
```</p>

<p>Yeah, that&rsquo;s it :)</p>

<p>But, the filter will not work, as of now, and if you try to visit your <code>users</code>
resource, it will spit out an error that says (something like):</p>

<p><code>ruby
undefined method `by_categorization_in' for #&lt;Ransack::Search:0x007fe2365288a0&gt;'`
</code></p>

<p>Obviously, we are yet to define how the filtering will take place.</p>

<h3>Step 2: Define the filtering method, a.k.a. ransacker</h3>

<p>Alright, so the error says that the given filtering method could not be found,
and therefore, we will start with its implementation. <a href="ransack">Ransack</a> is the
search library used by AA, and it provides a <code>ransacker</code> method that we can use
in our models to define custom search methods. Since, we defined our filter as
<code>by_categorization_in</code>, our ransacker method should be named as: <code>by_categorization</code>:</p>

<p>```ruby</p>

<h1>app/models/user.rb</h1>

<p>class User &lt; ActiveRecord::Base</p>

<p>  # categorize a given user as: :new, :active or :inactive
  def categorize</p>

<pre><code># .. mysterious code..
# .. returns one of the symbols: :new, :active or :inactive.
</code></pre>

<p>  end</p>

<p>  # define our custom search method
  ransacker :by_categorization, proc{ |v|</p>

<pre><code># some code..
</code></pre>

<p>  } do |parent|</p>

<pre><code># some other code..
</code></pre>

<p>  end
end
```</p>

<h3>Step 3: Define our filtering algorithm</h3>

<p>So, finally, we define how the filter will actually work. This is fairly easy
step, as well. Notice the <code>proc</code> in the <code>ransacker</code> method above? Also, the
<code>parent</code> variable? Yeah, we need to use them to define which users will be
filtered and which will be displayed.</p>

<p>In the given <code>proc</code>, the variable <code>v</code> is nothing special, and simply, contains
the search term we are filtering upon. In our case, this will be one of the
<code>New</code>, <code>Active</code> or <code>Inactive</code> words. The purpose of the <code>proc</code> being to map this
variable to an equivalent attribute in the user&rsquo;s table. Therefore, we can do
something like:</p>

<p>```ruby</p>

<h1>app/models/user.rb</h1>

<p>class User &lt; ActiveRecord::Base</p>

<p>  # categorize a given user as: :new, :active or :inactive
  def categorize</p>

<pre><code># .. mysterious code..
# .. returns one of the symbols: :new, :active or :inactive.
</code></pre>

<p>  end</p>

<p>  # a class method that returns the users belonging to a given category.
  def self.in_category(category = :new)</p>

<pre><code># .. could have been some really mysterious code, again..
# .. but, then, I am nobody :( ..
all.select{|user| user.categorize == category.to_s.underscore.to_sym }
</code></pre>

<p>  end</p>

<p>  # define our custom search method
  ransacker :by_categorization, proc{ |v|</p>

<pre><code>data = User.in_category(v).map(&amp;:id)
data = data.present? ? data : nil
</code></pre>

<p>  } do |parent|</p>

<pre><code># some other code..
</code></pre>

<p>  end
end
<code>``
I know that the above way to find out which user ids belong to a particular
category is really inefficient, but this is an example. Alright, so we made the
</code>proc` return some user IDs belonging to the category we were interested in.</p>

<p>Next is the <code>parent</code> variable, which probably is some weird ruby object, and to
be honest I am not entirely sure what all capabilities it provides (though, it
seems that I can use associations, fetch records for the given model, etc. using
this object). But, what we are really interested is in the <code>parent.table</code>
variable, which is an instance of the <code>Arel::Table</code> class, representing our
<code>users</code> table in the database. The purpose of this block is to obtain an
attribute from this table (a.k.a., an <code>Arel::Attributes::Attribute</code>), and match
the values returned by the <code>proc</code> above with the values for this attribute
across the whole <code>users</code> table. Values returned from the <code>proc</code> matching the
given attribute for any record in the database table (i.e. our <code>users</code> table)
will be returned and the rest entries/users will be filtered.</p>

<p>```ruby</p>

<h1>app/models/user.rb</h1>

<p>class User &lt; ActiveRecord::Base</p>

<p>  # categorize a given user as: :new, :active or :inactive
  def categorize</p>

<pre><code># .. mysterious code..
# .. returns one of the symbols: :new, :active or :inactive.
</code></pre>

<p>  end</p>

<p>  # a class method that returns the users belonging to a given category.
  def self.in_category(category = :new)</p>

<pre><code># .. could have been some really mysterious code, again..
# .. but, then, I am nobody :( ..
all.select{|user| user.categorize == category.to_s.underscore.to_sym }
</code></pre>

<p>  end</p>

<p>  # define our custom search method
  ransacker :by_categorization, proc{ |v|</p>

<pre><code>data = User.in_category(v).map(&amp;:id)
data = data.present? ? data : nil
</code></pre>

<p>  } do |parent|</p>

<pre><code>parent.table[:id]
</code></pre>

<p>  end
end
```</p>

<p>Done! The above should provide us with everything that we need to filter out our
users based on their categorization. Happy ransacking :)</p>
]]></content>
  </entry>
  
</feed>
